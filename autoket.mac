

/***********************************************/
/* Automatically declare ket variables complex */
/***********************************************/
common_functions: [sin,cos,asin,acos,tan,atan,exp,factorial] $

autobra(u) := block(for elm in u do autodecl(elm),
	      		matrix(u) ) $
autoket(u) := block(for elm in u do autodecl(elm),
	      		transpose(matrix(u)));

autodecl(elm):= block([i],
     if apply('numberp,[float(elm)])=true then 1    /* is it a number? */
     	elseif apply('complex_number_p,[elm])=true then 1  /* is it a complex number? */ 
	elseif apply('symbolp,[elm])=true and apply('atom,[elm])=true /* if symbol and atom */
	       then apply('declare,[elm,complex])
	elseif apply('atom,[elm])=false and apply('symbolp,[part(elm,1)])=true /* if only one part and atom */
	       then apply('declare,[part(elm,1),complex])
	elseif apply('length,[args(elm)]) > 1 /* if multiple args a*cos + b*sin, etc. */
	       then for i: 1 thru apply('length,[args(elm)]) do
	       	    if apply('atom,[part(elm,i)])=true and
		       apply('symbolp,[part(elm,i)])=true then
	       	       apply('declare,[part(elm,i),complex])
		       else /* dig deeper */
		        if apply('lfreeof,[common_functions,part(elm,i)])=false and
			   apply('length,[args(part(elm,i))])=1 then 0
			   elseif apply('atom,[part(elm,i,1)])=true and
			     	  apply('constantp,[part(elm,i,1)])=false and
			     	  apply('symbolp,[part(elm,i,1)])=true then
 	       	             	  apply('declare,[part(elm,i,1),complex])
        else 1);

/**********************************************************/
/* Compute the X and Y kets for spin-s, ms in the z-basis */
/**********************************************************/
spin_mket(s,ms,ax):=block([L,k,eql,soln,eq2,asol,n:2*s+1],
    L:makelist(concat(c,i),i,n),
    k: autoket(L),
    if ax=1 then eq1:SX(s).k-hbar*ms.k
        elseif ax=2 then eq1:SY(s).k-hbar*ms.k
        else disp("ax must be 1,2 i.e., (X,Y)"),
    eql: makelist(eq1[i][1],i,n-1),
    soln: solve(eql,makelist(concat(c,i),i,2,n)),
    k: subst(soln,k),
    eq2: norm(k)=1,
    asol: solve(eq2,c1*conjugate(c1)),
    subst(sqrt(rhs(asol[1])),c1,k)
)$

spin_mbra(s,ms,ax):=dagger(spin_mket(s,ms,ax))$