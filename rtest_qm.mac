(display2d:false,load(qm),0);
0 $

psi_bra:a*dagger(zp)+b*dagger(zm);
matrix([a,b]) $

ket([a,b])+ket([c,d]);
ket([c,d])+ket([a,b]) $

mket([a,b]);
matrix([a],[b]) $

mbra([a,b]);
matrix([a,b]) $

bell:(1/sqrt(2))*(ket([u,d])-ket([d,u]));
(ket([u,d])-ket([d,u]))/sqrt(2) $

dagger(bell);
(bra([u,d])-bra([d,u]))/sqrt(2) $

braket(bra([a1,b1]),ket([a2,b2]));
kron_delta(a1,a2)*kron_delta(b1,b2) $

declare([a,b],complex);
done $

psi:a*ket([1])+b*ket([2]);
ket([2])*b+ket([1])*a $

psidag:dagger(psi);
bra([2])*conjugate(b)+bra([1])*conjugate(a) $

psidag.psi;
b*conjugate(b)+a*conjugate(a) $

declare([c1,c2],complex,r,real);
done $

k:mket([c1,c2,r]);
matrix([c1],[c2],[r]) $

b:dagger(k);
matrix([conjugate(c1),conjugate(c2),r]) $

b.k;
r^2+c2*conjugate(c2)+c1*conjugate(c1) $

k:ket([u,d]);
ket([u,d]) $

b:bra([u,d]);
bra([u,d]) $

b.k;
1 $

k:ket([u,d]);
ket([u,d]) $

b:bra([u,d]);
bra([u,d]) $

b.k;
1 $

declare([c1,c2],complex);
done $

mket([c1,c2]);
matrix([c1],[c2]) $

facts();
[kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex), $

k:ket([a,b]);
ket([a,bra([u,d])]) $

mketp(k);
false $

k:mket([a,b]);
matrix([a],[bra([u,d])]) $

mketp(k);
true $

kill(c1,c2);
done $

mbra([c1,c2]);
matrix([c1,c2]) $

facts();
[kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)] $

b:mbra([a,b]);
matrix([a,bra([u,d])]) $

mbrap(b);
true $

autoket([a,b]);
matrix([a],[matrix([a,bra([u,d])])]) $

facts();
[kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)] $

autoket([a*sin(x),b*sin(x)]);
matrix([a*sin(x)],[matrix([a*sin(x),bra([u,d])*sin(x)])]) $

facts();
[kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)] $

autobra([a,b]);
matrix([a,matrix([a,bra([u,d])])]) $

facts();
[kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)] $

autobra([a*sin(x),b]);
matrix([a*sin(x),matrix([a,bra([u,d])])]) $

facts();
[kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)] $

dagger(mbra([%i,2]));
matrix([-%i],[2]) $

declare([a,b,c],complex);
done $

braket(mket([a,b,c]),mket([a,b,c]));
braket(matrix([a],[matrix([a,bra([u,d])])],[c]), $

braket(ket([a1,b1,c1]),ket([a2,b2,c2]));
kron_delta(a1,a2)*kron_delta(b1,b2)*kron_delta(c1,c2) $

declare([a,b,c],complex);
done $

norm(mket([a,b,c]));
norm(matrix([a],[matrix([a,bra([u,d])])],[c])) $

declare([a,b,c,d],complex);
done $

A:braket(mket([a,b]),mket([c,d]));
braket(matrix([a],[matrix([a,bra([u,d])])]),matrix([c],[d])) $

P:magsqr(A);
braket(matrix([a],[matrix([a,bra([u,d])])]),matrix([c],[d])) $

zp;
matrix([1],[0]) $

zm;
matrix([0],[1]) $

yp;
matrix([1/sqrt(2)],[%i/sqrt(2)]) $

ym;
matrix([1/sqrt(2)],[-(%i/sqrt(2))]) $

braket(xp,zp);
1/sqrt(2) $

declare([a,b],complex);
done $

psi:mket([a,b]);
matrix([a],[matrix([a,bra([u,d])])]) $

psi_x:'xp*braket(xp,psi)+'xm*braket(xm,psi);
braket(matrix([1/sqrt(2)],[1/sqrt(2)]),matrix([a], $

sigmay;
matrix([0,-%i],[%i,0]) $

Sy;
matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0]) $

commutator(Sx,Sy);
matrix([(%i*hbar^2)/2,0],[0,-((%i*hbar^2)/2)]) $

(1/2)*anticommutator(sigmax,sigmax);
matrix([1,0],[0,1]) $

SY(1/2);
matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0]) $

SX(1);
matrix([0,hbar/sqrt(2),0],[hbar/sqrt(2),0,hbar/sqrt(2)],[0, $

ev(expect(Sy,xp+ym),ratsimp);
-hbar $

ev(qm_variance(Sy,xp+ym),ratsimp);
(%i*hbar)/2 $

spin_mket(3/2,1/2,2);
matrix([sqrt(3)/2^(3/2)],[%i/2^(3/2)],[1/2^(3/2)],[ $

;
spin_mbra(1,1,1);
matrix([1/2,1/sqrt(2),1/2]) $

bra([3/2,1/2]);
bra([3/2,1/2]) $

ket([3/2,1/2]);
ket([3/2,1/2]) $

jmketp(ket([j,m]));
false $

jmketp(ket([3/2,1/2]));
true $

jmcheck(3/2,1/2);
true $

k:ket([j,m]);
ket([j,m]) $

JP(k);
hbar*ket([j,m+1])*sqrt(j*(j+1)-m*(m+1)) $

JM(k);
hbar*ket([j,m-1])*sqrt(j*(j+1)-(m-1)*m) $

Jsqr(k);
hbar^2*j*(j+1)*ket([j,m]) $

Jz(k);
hbar*ket([j,m])*m $

SP(1);
matrix([0,sqrt(2)*hbar,0],[0,0,sqrt(2)*hbar],[0,0,0]) $

SM(1);
matrix([0,0,0],[sqrt(2)*hbar,0,0],[0,sqrt(2)*hbar,0]) $

RY(1,t);
matrix([(cos(t)+1)/2,-(sin(t)/sqrt(2)),(1-cos(t))/2], $

UU(w*Sy,t);
matrix([cos((t*w)/2),-sin((t*w)/2)],[sin((t*w)/2),cos((t*w)/2)]) $

K:ket([a1,b1]);
ket([a1,b1]) $

B:bra([a2,b2]);
bra([a2,b2]) $

braket(B,K);
kron_delta(a1,a2)*kron_delta(b1,b2) $

bra([a1,Id,c1]).ket([a2,b2,c2]);
ket(["-",b2,"-"])*kron_delta(a1,a2)*kron_delta(c1,c2) $

bra([a1,b1,c1]).ket([Id,b2,c2]);
bra([a1,"-","-"])*kron_delta(b1,b2)*kron_delta(c1,c2) $

bell:(1/sqrt(2))*(ket([u,d])-ket([d,u]));
(ket([u,d])-ket([d,u]))/sqrt(2) $

rho:bell.dagger(bell);
(ket([u,d]) . bra([u,d])-ket([u,d]) . bra([d,u]) $

assume(notequal(u,d));
[notequal(u,d)] $

trace1:bra([u,Id]).rho.ket([u,Id])+bra([d,Id]).rho.ket([d,Id]);
ket(["-",u]) . bra(["-",u])/2+ket(["-",d]) . bra(["-",d])/2 $

