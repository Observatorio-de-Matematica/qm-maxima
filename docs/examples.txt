(display2d:false,load(qm),0);
psi_bra:a*dagger(zp)+b*dagger(zm);
ket([a,b])+ket([c,d]);
mket([a,b]);
mbra([a,b]);
bell:(1/sqrt(2))*(ket([u,d])-ket([d,u]));
dagger(bell);
braket(bra([a1,b1]),ket([a2,b2]));
declare([a,b],complex);
psi:a*ket([1])+b*ket([2]);
psidag:dagger(psi);
psidag.psi;
declare([c1,c2],complex,r,real);
k:mket([c1,c2,r]);
b:dagger(k);
b.k;
k:ket([u,d]);
b:bra([u,d]);
b.k;
k:ket([u,d]);
b:bra([u,d]);
b.k;
declare([c1,c2],complex);
mket([c1,c2]);
facts();
k:ket([a,b]);
mketp(k);
k:mket([a,b]);
mketp(k);
kill(c1,c2);
mbra([c1,c2]);
facts();
b:mbra([a,b]);
mbrap(b);
autoket([a,b]);
facts();
autoket([a*sin(x),b*sin(x)]);
facts();
autobra([a,b]);
facts();
autobra([a*sin(x),b]);
facts();
dagger(mbra([%i,2]));
declare([a,b,c],complex);
braket(mbra([a,b,c]),mket([a,b,c]));
braket(dagger(mket([a,b,c])),mket([a,b,c]));
braket(bra([a1,b1,c1]),ket([a2,b2,c2]));
declare([a,b,c],complex);
norm(mket([a,b,c]));
declare([a,b,c,d],complex);
A:braket(mbra([a,b]),mket([c,d]));
P:magsqr(A);
zp;
zm;
yp;
ym;
braket(dagger(xp),zp);
declare([a,b],complex);
psi:mket([a,b]);
psi_x:'xp*braket(dagger(xp),psi)+'xm*braket(dagger(xm),psi);
sigmay;
Sy;
commutator(Sx,Sy);
(1/2)*anticommutator(sigmax,sigmax);
SY(1/2);
SX(1);
ev(expect(Sy,xp+ym),ratsimp);
ev(qm_variance(Sy,xp+ym),ratsimp);
SP(1);
SM(1);
RY(1,t);
UU(w*Sy,t);
spin_mbra(3/2,1/2,2);
bra([3/2,1/2]);
ket([3/2,1/2]);
jmtop(3/2);
jmbot(3/2);
jmket(3/2,1/2);
jmketp(ket([j,m]));
jmketp(ket([3/2,1/2]));
jmcheck(3/2,1/2);
k:ket([j,m]);
Jp(k);
Jm(k);
Jsqr(k);
Jz(k);
tpket(ket([3/2,1/2]),ket([1/2,1/2]));
tpbra(bra([3/2,1/2]),bra([1/2,1/2]));
k:tpket(jmtop(1),jmbot(1));
K:Jtsqr(k);
B:tpdagger(k);
tpbraket(B,K);
k1:tpket(ket([1/2,1/2]),ket([1/2,-1/2]));
tpscmult(c,k1);
k1:tpket(ket([1/2,1/2]),ket([1/2,-1/2]));
k2:tpket(ket([1/2,-1/2]),ket([1/2,1/2]));
tpadd(k1,k2);
k1:tpket(ket([1/2,1/2]),ket([1/2,-1/2]));
tpdagger(k1);
k:tpket(ket([3/2,3/2]),ket([1/2,1/2]));
J1z(k);
J2z(k);
k:tpket(ket([3/2,3/2]),ket([1/2,1/2]));
Jtz(k);
k:tpket(ket([3/2,1/2]),ket([1/2,1/2]));
b:tpdagger(k);
J1p2m(k);
J1m2p(k);
k:tpket(ket([3/2,-1/2]),ket([1/2,1/2]));
B:tpdagger(k);
K2:Jtsqr(k);
tpbraket(B,K2);
get_j(15/4);
k:tpket(jmtop(1/2),jmtop(1));
Jtsqr(k);
get_j(15/4);
k:tpket(jmtop(1/2),jmtop(1));
k2:Jtm(k);
k3:Jtm(k2);
k4:Jtm(k3);
phi1:tpket(ket([1/2,1/2]),ket([1/2,1/2]));
phi2:tpket(ket([1/2,1/2]),ket([1/2,-1/2]));
phi3:tpket(ket([1/2,-1/2]),ket([1/2,1/2]));
phi4:tpket(ket([1/2,-1/2]),ket([1/2,-1/2]));
tpadd(J1z(phi1),tpscmult(-1,J2z(phi1)));
tpadd(J1z(phi2),tpscmult(-1,J2z(phi2)));
tpadd(J1z(phi3),tpscmult(-1,J2z(phi3)));
tpadd(J1z(phi4),tpscmult(-1,J2z(phi4)));
top:tpket(jmtop(1/2),jmtop(1/2));
Jtsqr(top);
get_j(2);
Jtz(top);
JMtop:ket([1,1]);
mid:Jtm(top);
Jm(JMtop);
mid:tpscmult(1/(sqrt(2)*hbar),mid);
bot:Jtm(mid);
Jm(ket([1,0]));
bot:tpscmult(1/(sqrt(2)*hbar),bot);
K:ket([a1,b1]);
B:bra([a2,b2]);
braket(B,K);
bra([a1,Id,c1]).ket([a2,b2,c2]);
bra([a1,b1,c1]).ket([Id,b2,c2]);
bell:(1/sqrt(2))*(ket([u,d])-ket([d,u]));
rho:bell.dagger(bell);
assume(notequal(u,d));
trace1:bra([u,Id]).rho.ket([u,Id])+bra([d,Id]).rho.ket([d,Id]);
declare(n,integer,n,scalar);
ap.ket([n]);
am.ket([n]);
bra([n]).(ap+am)^^4.ket([n]);
