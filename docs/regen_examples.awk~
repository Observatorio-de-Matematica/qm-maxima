BEGIN{
    debug=1;
    new_example=0;
    # minimum length of (%ixx) is (%in) or 5 chars
    # so if last index is 5 you know it's a single digit
    # and if the last index is 6 you know it's two digits, etc.
    minlength=5;

    # This doesn't work perfecty. Output consisting of multiple
    # lines has indentation that differs even for say %o7 being
    # renumbered to %o2. Anyway better to regenerate all of the
    # examples. Write a script for that.
}

($1~/@example/){new_example=1; icount=1;}
($1~/@end example/){new_example=0;}
($1~/\(%i[1-9]/ && new_example){
    n=index($1,"("); m=index($1,")");
    ndigits=m+1-minlength;
    num=substr($1,4,ndigits);
    newnum=icount++;
    if (debug) printf("%s %d %d %d %d %d\n",$1,n,m,ndigits,num,newnum);
    printf("(%%i%d)",newnum);
    printf("%s",substr($0,length($1)+1));
    printf("\n");
}
($1~/\(%o[1-9]/ && new_example){
    n=index($1,"("); m=index($1,")");
    ndigits=m+1-minlength;
    num=substr($1,4,ndigits);
    # newnum should be newnum from above
    if (debug) printf("%s %d %d %d %d %d\n",$1,n,m,ndigits,num,newnum);
    printf("(%%o%d) ",newnum);
    printf("%s",substr($0,length($1)+1));
    printf("\n");
}
($1 !~ /\(%i[1-9]/ && $1 !~/\(%o[1-9]/ ){print $0}
