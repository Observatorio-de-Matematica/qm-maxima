Loading /home/ehm/.maxima/maxima-init.mac
(%i1) batch("examples.txt")

read and interpret /home/ehm/math/Maxima/share/ehm/qm-maxima/docs/examples.txt
(%i2) display2d:false
(%i3) load(qm)
(%i4) kill(a)
(%o4) done
(%i5) ket(a)
(%o5) ket(a)
(%i6) declare([c1,c2],complex)
(%o6) done
(%i7) ket([c1,c2])
(%o7) matrix([c1],[c2])
(%i8) facts()
(%o8) [kind(hbar,real),hbar > 0,kind(c1,complex),kind(c2,complex)]
(%i9) kill(c1,c2)
(%o9) done
(%i10) bra(c1,c2)
(%o10) bra(c1,c2)
(%i11) bra([c1,c2])
(%o11) matrix([c1,c2])
(%i12) facts()
(%o12) [kind(hbar,real),hbar > 0]
(%i13) kill(a,b,k)
(%o13) done
(%i14) k:ket(a,b)
(%o14) ket(a,b)
(%i15) ketp(k)
(%o15) false
(%i16) k:ket([a,b])
(%o16) matrix([a],[b])
(%i17) ketp(k)
(%o17) true
(%i18) b:bra([a,b])
(%o18) matrix([a,b])
(%i19) brap(b)
(%o19) true
(%i20) dagger(bra([%i,2]))
(%o20) matrix([-%i],[2])
(%i21) declare([a,b,c],complex)
(%o21) done
(%i22) braket(ket([a,b,c]),ket([a,b,c]))
(%o22) braket(matrix([a],[matrix([a,b])],[c]),matrix([a],[matrix([a,b])],[c]))
(%i23) declare([a,b,c],complex)
(%o23) done
(%i24) norm(ket([a,b,c]))
(%o24) sqrt(braket(matrix([a],[matrix([a,b])],[c]),
                   matrix([a],[matrix([a,b])],[c])))
(%i25) norm(ket(a,b,c))
(%o25) sqrt(braket(ket(a,matrix([a,b]),c),ket(a,matrix([a,b]),c)))
(%i26) declare([a,b,c,d],complex)
(%o26) done
(%i27) A:braket(ket([a,b]),ket([c,d]))
(%o27) braket(matrix([a],[matrix([a,b])]),matrix([c],[d]))
(%i28) P:magsqr(A)
(%o28) braket(matrix([a],[matrix([a,b])]),matrix([c],[d]))
 *conjugate(braket(matrix([a],[matrix([a,b])]),matrix([c],[d])))
(%i29) zp
(%o29) matrix([1],[0])
(%i30) zm
(%o30) matrix([0],[1])
(%i31) yp
(%o31) matrix([1/sqrt(2)],[%i/sqrt(2)])
(%i32) ym
(%o32) matrix([1/sqrt(2)],[-(%i/sqrt(2))])
(%i33) braket(xp,zp)
(%o33) 1/sqrt(2)
(%i34) declare([a,b],complex)
(%o34) done
(%i35) psi:ket([a,b])
(%o35) matrix([a],[matrix([a,b])])
(%i36) psi_x:'xp*braket(xp,psi)+'xm*braket(xm,psi)
(%o36) braket(matrix([1/sqrt(2)],[1/sqrt(2)]),matrix([a],[matrix([a,b])]))*xp
 +braket(matrix([1/sqrt(2)],[-(1/sqrt(2))]),matrix([a],[matrix([a,b])]))*xm
(%i37) sigmay
(%o37) matrix([0,-%i],[%i,0])
(%i38) Sy
(%o38) matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0])
(%i39) commutator(Sx,Sy)
(%o39) matrix([(%i*hbar^2)/2,0],[0,-((%i*hbar^2)/2)])
(%i40) SY(1/2)
(%o40) matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0])
(%i41) SX(1)
(%o41) matrix([0,hbar/sqrt(2),0],[hbar/sqrt(2),0,hbar/sqrt(2)],[0,
                                                                hbar/sqrt(2),
                                                                0])
(%i42) ev(expect(Sy,xp+ym),ratsimp)
(%o42) -hbar
(%i43) ev(qm_variance(Sy,xp+ym),ratsimp)
(%o43) (%i*hbar)/2
(%i44) jm_bra(3/2,1/2)
(%o44) [jmbra,matrix([3/2,1/2])]
(%i45) K:jm_ket(j1,m1)
(%o45) jm_ket([j1,m1])
(%i46) B:jm_bra(j2,m2)
(%o46) jm_bra([j2,m2])
(%i47) jm_braket(B,K)
(%o47) jm_braket(jm_bra([j2,m2]),jm_ket([j1,m1]))
(%i48) SP(1)
(%o48) matrix([0,sqrt(2)*hbar,0],[0,0,sqrt(2)*hbar],[0,0,0])
(%i49) SM(1)
(%o49) matrix([0,0,0],[sqrt(2)*hbar,0,0],[0,sqrt(2)*hbar,0])
(%i50) RZ(1/2,t)
Proviso: assuming 64*t # 0 
(%o50) matrix([%e^-((%i*t)/2),0],[0,%e^((%i*t)/2)])
(%i51) UU(w*Sy,t)
Proviso: assuming 64*t*w # 0 
(%o51) matrix([cos((t*w)/2),-sin((t*w)/2)],[sin((t*w)/2),cos((t*w)/2)])
(%i52) ketprod(zp,zm)
(%o52) [tpket,[matrix([1],[0]),matrix([0],[1])]]
(%i53) ketprod('zp,'zm)
"all elements must be kets"

(%o53) done
(%i54) kill(a,b,c,d)
(%o54) done
(%i55) declare([a,b,c,d],complex)
(%o55) done
(%i56) braprod(bra(a,b),bra(c,d))
"all elements must be bras"

(%o56) done
(%i57) braprod(dagger(zp),bra(c,d))
"all elements must be bras"

(%o57) done
(%i58) zpb:dagger(zp)
(%o58) matrix([1,0])
(%i59) zmb:dagger(zm)
(%o59) matrix([0,1])
(%i60) K:ketprod('zp,'zm)
"all elements must be kets"

(%o60) done
(%i61) B:braprod(zpb,zmb)
(%o61) [tpbra,[matrix([1,0]),matrix([0,1])]]
(%i62) B:braprod('zpb,'zmb)
"all elements must be bras"

(%o62) done
(%i63) braketprod(K,B)
(%o63) false
(%i64) braketprod(B,K)
(%o64) false
(%o65) "/home/ehm/math/Maxima/share/ehm/qm-maxima/docs/examples.txt"
