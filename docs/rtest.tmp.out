Loading /home/ehm/.maxima/maxima-init.mac
(%i1) batch("examples.txt")

read and interpret /home/ehm/math/Maxima/share/ehm/qm-maxima/docs/examples.txt
(%i2) display2d:false
(%i3) load(qm)
(%i4) ket(a,b)+ket(c,d)
(%o4) ket(c,d)+ket(a,b)
(%i5) ket([a,b])+ket([c,d])
(%o5) matrix([c+a],[d+b])
(%i6) ketprod('zp,'zm)+ketprod('zm,'zp)
(%o6) ketprod(zp,zm)+ketprod(zm,zp)
(%i7) ketprod([zp,zm])
(%o7) [tpket,[matrix([1],[0]),matrix([0],[1])]]
(%i8) kill(a)
(%o8) done
(%i9) ket(a)
(%o9) ket(a)
(%i10) declare([c1,c2],complex)
(%o10) done
(%i11) ket([c1,c2])
(%o11) matrix([c1],[c2])
(%i12) facts()
(%o12) [kind(hbar,real),hbar > 0,kind(c1,complex),kind(c2,complex)]
(%i13) kill(c1,c2)
(%o13) done
(%i14) bra(c1,c2)
(%o14) bra(c1,c2)
(%i15) bra([c1,c2])
(%o15) matrix([c1,c2])
(%i16) facts()
(%o16) [kind(hbar,real),hbar > 0]
(%i17) kill(a,b,k)
(%o17) done
(%i18) k:ket(a,b)
(%o18) ket(a,b)
(%i19) ketp(k)
(%o19) false
(%i20) k:ket([a,b])
(%o20) matrix([a],[b])
(%i21) ketp(k)
(%o21) true
(%i22) b:bra([a,b])
(%o22) matrix([a,b])
(%i23) brap(b)
(%o23) true
(%i24) dagger(bra([%i,2]))
(%o24) matrix([-%i],[2])
(%i25) declare([a,b,c],complex)
(%o25) done
(%i26) braket(ket([a,b,c]),ket([a,b,c]))
(%o26) braket(matrix([a],[matrix([a,b])],[c]),matrix([a],[matrix([a,b])],[c]))
(%i27) declare([a,b,c],complex)
(%o27) done
(%i28) norm(ket([a,b,c]))
(%o28) norm(matrix([a],[matrix([a,b])],[c]))
(%i29) norm(ket(a,b,c))
(%o29) norm(ket(a,matrix([a,b]),c))
(%i30) declare([a,b,c,d],complex)
(%o30) done
(%i31) A:braket(ket([a,b]),ket([c,d]))
(%o31) braket(matrix([a],[matrix([a,b])]),matrix([c],[d]))
(%i32) P:magsqr(A)
(%o32) braket(matrix([a],[matrix([a,b])]),matrix([c],[d]))
 *conjugate(braket(matrix([a],[matrix([a,b])]),matrix([c],[d])))
(%i33) zp
(%o33) matrix([1],[0])
(%i34) zm
(%o34) matrix([0],[1])
(%i35) yp
(%o35) matrix([1/sqrt(2)],[%i/sqrt(2)])
(%i36) ym
(%o36) matrix([1/sqrt(2)],[-(%i/sqrt(2))])
(%i37) braket(xp,zp)
(%o37) 1/sqrt(2)
(%i38) declare([a,b],complex)
(%o38) done
(%i39) psi:ket([a,b])
(%o39) matrix([a],[matrix([a,b])])
(%i40) psi_x:'xp*braket(xp,psi)+'xm*braket(xm,psi)
(%o40) braket(matrix([1/sqrt(2)],[1/sqrt(2)]),matrix([a],[matrix([a,b])]))*xp
 +braket(matrix([1/sqrt(2)],[-(1/sqrt(2))]),matrix([a],[matrix([a,b])]))*xm
(%i41) sigmay
(%o41) matrix([0,-%i],[%i,0])
(%i42) Sy
(%o42) matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0])
(%i43) commutator(Sx,Sy)
(%o43) matrix([(%i*hbar^2)/2,0],[0,-((%i*hbar^2)/2)])
(%i44) SY(1/2)
(%o44) matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0])
(%i45) SX(1)
(%o45) matrix([0,hbar/sqrt(2),0],[hbar/sqrt(2),0,hbar/sqrt(2)],[0,
                                                                hbar/sqrt(2),
                                                                0])
(%i46) ev(expect(Sy,xp+ym),ratsimp)
(%o46) -hbar
(%i47) ev(qm_variance(Sy,xp+ym),ratsimp)
(%o47) (%i*hbar)/2
(%i48) jm_bra(3/2,1/2)
(%o48) jm_bra(3/2,1/2)
(%i49) jm_bra([3/2,1/2])
(%o49) [jmbra,matrix([3/2,1/2])]
(%i50) jm_ketp(jm_ket(j,m))
(%o50) false
(%i51) jm_ketp(jm_ket([j,m]))
(%o51) true
(%i52) jm_check(3/2,1/2)
(%o52) true
(%i53) K:jm_ket(j1,m1)
(%o53) jm_ket(j1,m1)
(%i54) B:jm_bra(j2,m2)
(%o54) jm_bra(j2,m2)
(%i55) jm_braket(B,K)
(%o55) jm_braket(jm_bra(j2,m2),jm_ket(j1,m1))
(%i56) B:jm_bra(j1,m1)
(%o56) jm_bra(j1,m1)
(%i57) jm_braket(B,K)
(%o57) jm_braket(jm_bra(j1,m1),jm_ket(j1,m1))
(%i58) K:jm_ket([j1,m1])
(%o58) [jmket,matrix([j1,m1])]
(%i59) B:jm_bra([j2,m2])
(%o59) [jmbra,matrix([j2,m2])]
(%i60) jm_braket(B,K)
(%o60) 0
(%i61) k:jm_ket([j,m])
(%o61) [jmket,matrix([j,m])]
(%i62) JP(k)
(%o62) hbar*'jm_ket(j,m+1)*sqrt(j*(j+1)-m*(m+1))
(%i63) JM(k)
(%o63) hbar*'jm_ket(j,m-1)*sqrt(j*(j+1)-(m-1)*m)
(%i64) Jsqr(k)
(%o64) hbar^2*j*(j+1)*'jm_ket(j,m)
(%i65) Jz(k)
(%o65) hbar*'jm_ket(j,m)*m
(%i66) SP(1)
(%o66) matrix([0,sqrt(2)*hbar,0],[0,0,sqrt(2)*hbar],[0,0,0])
(%i67) SM(1)
(%o67) matrix([0,0,0],[sqrt(2)*hbar,0,0],[0,sqrt(2)*hbar,0])
(%i68) RZ(1/2,t)
Proviso: assuming 64*t # 0 
(%o68) matrix([%e^-((%i*t)/2),0],[0,%e^((%i*t)/2)])
(%i69) UU(w*Sy,t)
Proviso: assuming 64*t*w # 0 
(%o69) matrix([cos((t*w)/2),-sin((t*w)/2)],[sin((t*w)/2),cos((t*w)/2)])
(%i70) ketprod(zp,zm)
(%o70) ketprod(matrix([1],[0]),matrix([0],[1]))
(%i71) ketprod('zp,'zm)
(%o71) ketprod(zp,zm)
(%i72) kill(a,b,c,d)
(%o72) done
(%i73) declare([a,b,c,d],complex)
(%o73) done
(%i74) braprod(bra([a,b]),bra([c,d]))
(%o74) braprod(matrix([a,b]),matrix([c,d]))
(%i75) braprod(dagger(zp),bra([c,d]))
(%o75) braprod(matrix([1,0]),matrix([c,d]))
(%i76) K:ketprod(zp,zm)
(%o76) ketprod(matrix([1],[0]),matrix([0],[1]))
(%i77) zpb:dagger(zp)
(%o77) matrix([1,0])
(%i78) zmb:dagger(zm)
(%o78) matrix([0,1])
(%i79) B:braprod(zpb,zmb)
(%o79) braprod(matrix([1,0]),matrix([0,1]))
(%i80) braketprod(K,B)
(%o80) false
(%i81) braketprod(B,K)
(%o81) false
(%o82) "/home/ehm/math/Maxima/share/ehm/qm-maxima/docs/examples.txt"
