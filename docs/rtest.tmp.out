Loading /home/ehm/.maxima/maxima-init.mac
(%i1) batch("examples.txt")

read and interpret /home/ehm/math/Maxima/share/ehm/qm-maxima/docs/examples.txt
(%i2) (display2d:false,load(qm),0)
(%o2) 0
(%i3) ket([a,b])+ket([c,d])
(%o3) ket([c,d])+ket([a,b])
(%i4) mket([a,b])+mket([c,d])
(%o4) matrix([c+a],[d+b])
(%i5) bell:(1/sqrt(2))*(ket([u,d])-ket([d,u]))
(%o5) (ket([u,d])-ket([d,u]))/sqrt(2)
(%i6) braket(bra([a1,b1]),ket([a2,b2]))
(%o6) kron_delta(a1,a2)*kron_delta(b1,b2)
(%i7) tpket([zp,zm])
(%o7) [tpket,[matrix([1],[0]),matrix([0],[1])]]
(%i8) declare([a,b],complex)
(%o8) done
(%i9) psi:a*ket([1])+b*ket([2])
(%o9) ket([2])*b+ket([1])*a
(%i10) psidag:dagger(psi)
(%o10) bra([2])*conjugate(b)+bra([1])*conjugate(a)
(%i11) psidag . psi
(%o11) b*conjugate(b)+a*conjugate(a)
(%i12) declare([c1,c2],complex,r,real)
(%o12) done
(%i13) k:mket([c1,c2,r])
(%o13) matrix([c1],[c2],[r])
(%i14) b:dagger(k)
(%o14) matrix([conjugate(c1),conjugate(c2),r])
(%i15) b . k
(%o15) r^2+c2*conjugate(c2)+c1*conjugate(c1)
(%i16) k:ket([u,d])
(%o16) ket([u,d])
(%i17) b:bra([u,d])
(%o17) bra([u,d])
(%i18) b . k
(%o18) 1
(%i19) k:ket([u,d])
(%o19) ket([u,d])
(%i20) b:bra([u,d])
(%o20) bra([u,d])
(%i21) b . k
(%o21) 1
(%i22) declare([c1,c2],complex)
(%o22) done
(%i23) mket([c1,c2])
(%o23) matrix([c1],[c2])
(%i24) facts()
(%o24) [kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),
        kind(c1,complex),kind(c2,complex),kind(r,real)]
(%i25) k:ket([a,b])
(%o25) ket([a,bra([u,d])])
(%i26) mketp(k)
(%o26) false
(%i27) k:mket([a,b])
(%o27) matrix([a],[bra([u,d])])
(%i28) mketp(k)
(%o28) true
(%i29) kill(c1,c2)
(%o29) done
(%i30) mbra([c1,c2])
(%o30) matrix([c1,c2])
(%i31) facts()
(%o31) [kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)]
(%i32) b:mbra([a,b])
(%o32) matrix([a,bra([u,d])])
(%i33) mbrap(b)
(%o33) true
(%i34) autoket([a,b])
(%o34) matrix([a],[matrix([a,bra([u,d])])])
(%i35) facts()
(%o35) [kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)]
(%i36) autoket([a*sin(x),b*sin(x)])
(%o36) matrix([a*sin(x)],[matrix([a*sin(x),bra([u,d])*sin(x)])])
(%i37) facts()
(%o37) [kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)]
(%i38) autobra([a,b])
(%o38) matrix([a,matrix([a,bra([u,d])])])
(%i39) facts()
(%o39) [kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)]
(%i40) autobra([a*sin(x),b])
(%o40) matrix([a*sin(x),matrix([a,bra([u,d])])])
(%i41) facts()
(%o41) [kind(hbar,real),hbar > 0,kind(a,complex),kind(b,complex),kind(r,real)]
(%i42) dagger(mbra([%i,2]))
(%o42) matrix([-%i],[2])
(%i43) declare([a,b,c],complex)
(%o43) done
(%i44) braket(mket([a,b,c]),mket([a,b,c]))
(%o44) braket(matrix([a],[matrix([a,bra([u,d])])],[c]),
              matrix([a],[matrix([a,bra([u,d])])],[c]))
(%i45) braket(ket([a1,b1,c1]),ket([a2,b2,c2]))
(%o45) kron_delta(a1,a2)*kron_delta(b1,b2)*kron_delta(c1,c2)
(%i46) declare([a,b,c],complex)
(%o46) done
(%i47) norm(mket([a,b,c]))
(%o47) norm(matrix([a],[matrix([a,bra([u,d])])],[c]))
(%i48) declare([a,b,c,d],complex)
(%o48) done
(%i49) A:braket(mket([a,b]),mket([c,d]))
(%o49) braket(matrix([a],[matrix([a,bra([u,d])])]),matrix([c],[d]))
(%i50) P:magsqr(A)
(%o50) braket(matrix([a],[matrix([a,bra([u,d])])]),matrix([c],[d]))
 *conjugate(braket(matrix([a],[matrix([a,bra([u,d])])]),matrix([c],[d])))
(%i51) ket([a])+ket([b])
(%o51) ket([matrix([a,bra([u,d])])])+ket([a])
(%i52) braket(bra([a]),ket([b]))
(%o52) 0
(%i53) braket(bra([a])+bra([c]),ket([b]))
(%o53) 0
(%i54) zp
(%o54) matrix([1],[0])
(%i55) zm
(%o55) matrix([0],[1])
(%i56) yp
(%o56) matrix([1/sqrt(2)],[%i/sqrt(2)])
(%i57) ym
(%o57) matrix([1/sqrt(2)],[-(%i/sqrt(2))])
(%i58) braket(xp,zp)
(%o58) 1/sqrt(2)
(%i59) declare([a,b],complex)
(%o59) done
(%i60) psi:mket([a,b])
(%o60) matrix([a],[matrix([a,bra([u,d])])])
(%i61) psi_x:'xp*braket(xp,psi)+'xm*braket(xm,psi)
(%o61) braket(matrix([1/sqrt(2)],[1/sqrt(2)]),matrix([a],
                                                     [
                                                      matrix(
                                                       [a,bra([u,d])])]))
 *xp
 +braket(matrix([1/sqrt(2)],[-(1/sqrt(2))]),
         matrix([a],[matrix([a,bra([u,d])])]))
  *xm
(%i62) sigmay
(%o62) matrix([0,-%i],[%i,0])
(%i63) Sy
(%o63) matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0])
(%i64) commutator(Sx,Sy)
(%o64) matrix([(%i*hbar^2)/2,0],[0,-((%i*hbar^2)/2)])
(%i65) SY(1/2)
(%o65) matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0])
(%i66) SX(1)
(%o66) matrix([0,hbar/sqrt(2),0],[hbar/sqrt(2),0,hbar/sqrt(2)],[0,
                                                                hbar/sqrt(2),
                                                                0])
(%i67) ev(expect(Sy,xp+ym),ratsimp)
(%o67) -hbar
(%i68) ev(qm_variance(Sy,xp+ym),ratsimp)
(%o68) (%i*hbar)/2
(%i69) spin_mket(3/2,1/2,2)
(%o69) matrix([sqrt(3)/2^(3/2)],[%i/2^(3/2)],[1/2^(3/2)],[
                                                          (sqrt(3)*%i)
                                                           /2^(3/2)])
(%i70) spin_mbra(1,1,1)
(%o70) matrix([1/2,1/sqrt(2),1/2])
(%i71) jmbra(3/2,1/2)
(%o71) jmbra(3/2,1/2)
(%i72) jmbra([3/2,1/2])
(%o72) [jmbra,matrix([3/2,1/2])]
(%i73) jmketp(jmket(j,m))
(%o73) false
(%i74) jmketp(jmket([j,m]))
(%o74) true
(%i75) jmcheck(3/2,1/2)
(%o75) true
(%i76) K:jmket(j1,m1)
(%o76) jmket(j1,m1)
(%i77) B:jmbra(j2,m2)
(%o77) jmbra(j2,m2)
(%i78) jmbraket(B,K)
(%o78) kron_delta(j1,j2)*kron_delta(m1,m2)
(%i79) B:jmbra(j1,m1)
(%o79) jmbra(j1,m1)
(%i80) jmbraket(B,K)
(%o80) 1
(%i81) K:jmket([3/2,1/2])
(%o81) [jmket,matrix([3/2,1/2])]
(%i82) B:jmbra([3/2,1/2])
(%o82) [jmbra,matrix([3/2,1/2])]
(%i83) jmbraket(B,K)
(%o83) 1
(%i84) jmbraket(jmbra(j1,m1),jmket(j2,m2))
(%o84) kron_delta(j1,j2)*kron_delta(m1,m2)
(%i85) k:jmket([j,m])
(%o85) [jmket,matrix([j,m])]
(%i86) JP(k)
(%o86) hbar*'jmket(j,m+1)*sqrt(j*(j+1)-m*(m+1))
(%i87) JM(k)
(%o87) hbar*'jmket(j,m-1)*sqrt(j*(j+1)-(m-1)*m)
(%i88) Jsqr(k)
(%o88) hbar^2*j*(j+1)*'jmket(j,m)
(%i89) Jz(k)
(%o89) hbar*'jmket(j,m)*m
(%i90) SP(1)
(%o90) matrix([0,sqrt(2)*hbar,0],[0,0,sqrt(2)*hbar],[0,0,0])
(%i91) SM(1)
(%o91) matrix([0,0,0],[sqrt(2)*hbar,0,0],[0,sqrt(2)*hbar,0])
(%i92) RZ(1/2,t)
Proviso: assuming 64*t # 0 
(%o92) matrix([%e^-((%i*t)/2),0],[0,%e^((%i*t)/2)])
(%i93) UU(w*Sy,t)
Proviso: assuming 64*t*w # 0 
(%o93) matrix([cos((t*w)/2),-sin((t*w)/2)],[sin((t*w)/2),cos((t*w)/2)])
(%i94) kill(a,b,c,d)
(%o94) done
(%i95) declare([a,b,c,d],complex)
(%o95) done
(%i96) tpbra([mbra([a,b]),mbra([c,d])])
(%o96) [tpbra,[matrix([a,b]),matrix([c,d])]]
(%i97) tpbra([dagger(zp),mbra([c,d])])
(%o97) [tpbra,[matrix([1,0]),matrix([c,d])]]
(%i98) K:tpket([zp,zm])
(%o98) [tpket,[matrix([1],[0]),matrix([0],[1])]]
(%i99) zpb:dagger(zp)
(%o99) matrix([1,0])
(%i100) zmb:dagger(zm)
(%o100) matrix([0,1])
(%i101) B:tpbra([zpb,zmb])
(%o101) [tpbra,[matrix([1,0]),matrix([0,1])]]
(%i102) tpbraket(K,B)
(%o102) false
(%i103) tpbraket(B,K)
(%o103) 1
(%i104) K:ket([a1,b1])
(%o104) ket([a1,b1])
(%i105) B:bra([a2,b2])
(%o105) bra([a2,b2])
(%i106) braket(B,K)
(%o106) kron_delta(a1,a2)*kron_delta(b1,b2)
(%i107) bra([a1,Id,c1]) . ket([a2,b2,c2])
(%o107) ket(["-",b2,"-"])*kron_delta(a1,a2)*kron_delta(c1,c2)
(%i108) bra([a1,b1,c1]) . ket([Id,b2,c2])
(%o108) bra([a1,"-","-"])*kron_delta(b1,b2)*kron_delta(c1,c2)
(%o109) "/home/ehm/math/Maxima/share/ehm/qm-maxima/docs/examples.txt"
