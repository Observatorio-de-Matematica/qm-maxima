Loading /home/ehm/.maxima/maxima-init.mac
(%i1) batch("examples.txt")

read and interpret /home/ehm/math/Maxima/share/ehm/qm-maxima/docs/examples.txt
(%i2) display2d:false
(%i3) load(qm)
(%i4) ket(a,b)+ket(c,d)
(%o4) ket(c,d)+ket(a,b)
(%i5) ket([a,b])+ket([c,d])
(%o5) matrix([c+a],[d+b])
(%i6) ketprod('zp,'zm)+ketprod('zm,'zp)
(%o6) ketprod(zp,zm)+ketprod(zm,zp)
(%i7) ketprod([zp,zm])
(%o7) [tpket,[matrix([1],[0]),matrix([0],[1])]]
(%i8) declare([a,b],complex)
(%o8) done
(%i9) psi:a*ket(1)+b*ket(2)
(%o9) ket(2)*b+ket(1)*a
(%i10) psidag:dagger(psi)
(%o10) bra(2)*conjugate(b)+bra(1)*conjugate(a)
(%i11) psidag . psi
(%o11) b*conjugate(b)+a*conjugate(a)
(%i12) kill(a)
(%o12) done
(%i13) ket(a)
(%o13) ket(a)
(%i14) declare([c1,c2],complex)
(%o14) done
(%i15) ket([c1,c2])
(%o15) matrix([c1],[c2])
(%i16) facts()
(%o16) [kind(hbar,real),hbar > 0,kind(b,complex),kind(c1,complex),kind(c2,
                                                                       complex)]
(%i17) kill(c1,c2)
(%o17) done
(%i18) bra(c1,c2)
(%o18) bra(c1,c2)
(%i19) bra([c1,c2])
(%o19) matrix([c1,c2])
(%i20) facts()
(%o20) [kind(hbar,real),hbar > 0,kind(b,complex)]
(%i21) kill(a,b,k)
(%o21) done
(%i22) k:ket(a,b)
(%o22) ket(a,b)
(%i23) ketp(k)
(%o23) false
(%i24) k:ket([a,b])
(%o24) matrix([a],[b])
(%i25) ketp(k)
(%o25) true
(%i26) b:bra([a,b])
(%o26) matrix([a,b])
(%i27) brap(b)
(%o27) true
(%i28) dagger(bra([%i,2]))
(%o28) matrix([-%i],[2])
(%i29) declare([a,b,c],complex)
(%o29) done
(%i30) braket(ket([a,b,c]),ket([a,b,c]))
(%o30) braket(matrix([a],[matrix([a,b])],[c]),matrix([a],[matrix([a,b])],[c]))
(%i31) declare([a,b,c],complex)
(%o31) done
(%i32) norm(ket([a,b,c]))
(%o32) norm(matrix([a],[matrix([a,b])],[c]))
(%i33) norm(ket(a,b,c))
(%o33) norm(ket(a,matrix([a,b]),c))
(%i34) declare([a,b,c,d],complex)
(%o34) done
(%i35) A:braket(ket([a,b]),ket([c,d]))
(%o35) braket(matrix([a],[matrix([a,b])]),matrix([c],[d]))
(%i36) P:magsqr(A)
(%o36) braket(matrix([a],[matrix([a,b])]),matrix([c],[d]))
 *conjugate(braket(matrix([a],[matrix([a,b])]),matrix([c],[d])))
(%i37) ket(a)+ket(b)
(%o37) ket(matrix([a,b]))+ket(a)
(%i38) braket(bra(a),ket(b))
(%o38) 0
(%i39) braket(bra(a)+bra(c),ket(b))
(%o39) 0
(%i40) zp
(%o40) matrix([1],[0])
(%i41) zm
(%o41) matrix([0],[1])
(%i42) yp
(%o42) matrix([1/sqrt(2)],[%i/sqrt(2)])
(%i43) ym
(%o43) matrix([1/sqrt(2)],[-(%i/sqrt(2))])
(%i44) braket(xp,zp)
(%o44) 1/sqrt(2)
(%i45) declare([a,b],complex)
(%o45) done
(%i46) psi:ket([a,b])
(%o46) matrix([a],[matrix([a,b])])
(%i47) psi_x:'xp*braket(xp,psi)+'xm*braket(xm,psi)
(%o47) braket(matrix([1/sqrt(2)],[1/sqrt(2)]),matrix([a],[matrix([a,b])]))*xp
 +braket(matrix([1/sqrt(2)],[-(1/sqrt(2))]),matrix([a],[matrix([a,b])]))*xm
(%i48) sigmay
(%o48) matrix([0,-%i],[%i,0])
(%i49) Sy
(%o49) matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0])
(%i50) commutator(Sx,Sy)
(%o50) matrix([(%i*hbar^2)/2,0],[0,-((%i*hbar^2)/2)])
(%i51) SY(1/2)
(%o51) matrix([0,-((%i*hbar)/2)],[(%i*hbar)/2,0])
(%i52) SX(1)
(%o52) matrix([0,hbar/sqrt(2),0],[hbar/sqrt(2),0,hbar/sqrt(2)],[0,
                                                                hbar/sqrt(2),
                                                                0])
(%i53) ev(expect(Sy,xp+ym),ratsimp)
(%o53) -hbar
(%i54) ev(qm_variance(Sy,xp+ym),ratsimp)
(%o54) (%i*hbar)/2
(%i55) jm_bra(3/2,1/2)
(%o55) jm_bra(3/2,1/2)
(%i56) jm_bra([3/2,1/2])
(%o56) [jmbra,matrix([3/2,1/2])]
(%i57) jm_ketp(jm_ket(j,m))
(%o57) false
(%i58) jm_ketp(jm_ket([j,m]))
(%o58) true
(%i59) jm_check(3/2,1/2)
(%o59) true
(%i60) K:jm_ket(j1,m1)
(%o60) jm_ket(j1,m1)
(%i61) B:jm_bra(j2,m2)
(%o61) jm_bra(j2,m2)
(%i62) jm_braket(B,K)
(%o62) kron_delta(j1,j2)*kron_delta(m1,m2)
(%i63) B:jm_bra(j1,m1)
(%o63) jm_bra(j1,m1)
(%i64) jm_braket(B,K)
(%o64) 1
(%i65) K:jm_ket([j1,m1])
(%o65) [jmket,matrix([j1,m1])]
(%i66) B:jm_bra([j2,m2])
(%o66) [jmbra,matrix([j2,m2])]
(%i67) jm_braket(B,K)
(%o67) 0
(%i68) jm_braket(jm_bra(j1,m1)+jm_bra(j3,m3),jm_ket(j2,m2))
(%o68) kron_delta(j2,j3)*kron_delta(m2,m3)+kron_delta(j1,j2)*kron_delta(m1,m2)
(%i69) k:jm_ket([j,m])
(%o69) [jmket,matrix([j,m])]
(%i70) JP(k)
(%o70) hbar*'jm_ket(j,m+1)*sqrt(j*(j+1)-m*(m+1))
(%i71) JM(k)
(%o71) hbar*'jm_ket(j,m-1)*sqrt(j*(j+1)-(m-1)*m)
(%i72) Jsqr(k)
(%o72) hbar^2*j*(j+1)*'jm_ket(j,m)
(%i73) Jz(k)
(%o73) hbar*'jm_ket(j,m)*m
(%i74) SP(1)
(%o74) matrix([0,sqrt(2)*hbar,0],[0,0,sqrt(2)*hbar],[0,0,0])
(%i75) SM(1)
(%o75) matrix([0,0,0],[sqrt(2)*hbar,0,0],[0,sqrt(2)*hbar,0])
(%i76) RZ(1/2,t)
Proviso: assuming 64*t # 0 
(%o76) matrix([%e^-((%i*t)/2),0],[0,%e^((%i*t)/2)])
(%i77) UU(w*Sy,t)
Proviso: assuming 64*t*w # 0 
(%o77) matrix([cos((t*w)/2),-sin((t*w)/2)],[sin((t*w)/2),cos((t*w)/2)])
(%i78) ketprod(zp,zm)
(%o78) ketprod(matrix([1],[0]),matrix([0],[1]))
(%i79) ketprod('zp,'zm)
(%o79) ketprod(zp,zm)
(%i80) kill(a,b,c,d)
(%o80) done
(%i81) declare([a,b,c,d],complex)
(%o81) done
(%i82) braprod(bra([a,b]),bra([c,d]))
(%o82) braprod(matrix([a,b]),matrix([c,d]))
(%i83) braprod(dagger(zp),bra([c,d]))
(%o83) braprod(matrix([1,0]),matrix([c,d]))
(%i84) K:ketprod(zp,zm)
(%o84) ketprod(matrix([1],[0]),matrix([0],[1]))
(%i85) zpb:dagger(zp)
(%o85) matrix([1,0])
(%i86) zmb:dagger(zm)
(%o86) matrix([0,1])
(%i87) B:braprod(zpb,zmb)
(%o87) braprod(matrix([1,0]),matrix([0,1]))
(%i88) braketprod(K,B)
(%o88) false
(%i89) braketprod(B,K)
(%o89) false
(%o90) "/home/ehm/math/Maxima/share/ehm/qm-maxima/docs/examples.txt"
