\input texinfo   @c -*-texinfo-*-

@setfilename qm.info
@settitle Package qm

@ifinfo
@macro var {expr}
<\expr\>
@end macro
@end ifinfo

@dircategory Mathematics/Maxima
@direntry
* Package qm: (maxima) Maxima share package qm for quantum mechanics
@end direntry

@menu
* Introduction to package qm::
* Functions and Variables for qm::
@end menu
@node Top, Introduction to package qm, (dir), (dir)
@top

@menu
* Introduction to package qm::
* Functions and Variables for qm::

@detailmenu
 --- The Detailed Node Listing ---

* Introduction to package qm::
* Functions and Variables for qm::

@end detailmenu
@end menu


@chapter Package qm

@node Introduction to package qm, Functions and Variables for qm, Top, Top
@section Introduction to package qm

The @code{qm} package was written by Eric Majzoub, University of
Missouri. Email: majzoube-at-umsystem.edu

The @code{qm} package provides functions and standard definitions to
solve quantum mechanics problems in a finite dimensional Hilbert
space. For example, one can calculate the outcome of Stern-Gerlach
experiments using the built-in definition of the Sx, Sy, and Sz
operators for arbitrary spin, e.g. @code{s=@{1/2, 1, 3/2,
@dots{}@}}. For spin-1/2 the standard basis states in the @var{x},
@var{y}, and @var{z}-basis are available as @code{@{xp,xm@}},
@code{@{yp,ym@}}, and @code{@{zp,zm@}}. One can create general ket
vectors with arbitrary but finite dimension and perform standard
computations such as expectation value, variance, etc. The angular
momentum @var{|j,m>} representation of kets is also available. It is
also possible to create tensor product states for multiparticle systems
and to perform calculations on those systems.

Kets and bras are represented by column and row vectors, respectively.
For spin-1/2 particles, for example, the bra vector

@code{<psi| = a <z+| + b <z-|}

is represented by the row vector @code{[a b]}, where the basis vectors
are

@code{<z+| = [1 0]}

and

@code{<z-| = [0 1]}.

Generally, if one wishes to do purely symbolic calculations, then input
of basic kets, (j,m)-kets, and so forth should be done without lists. If
one wishes to do numerical computations using the kets then enter the
arguments as a list. See the following examples.

@example
@group
(%i1) ket(a,b)+ket(c,d);
(%o1)                           |c, d> + |a, b>
(%i2) ket([a,b])+ket([c,d]);
                                   [ c + a ]
(%o2)                              [       ]
                                   [ d + b ]
@end group
@group
(%i1) ketprod('zp,'zm)+ketprod('zm,'zp);
(%o1)                  ketprod(zp, zm) + ketprod(zm, zp)
(%i2) ketprod([zp,zm]);
                                     [ 1 ]  [ 0 ]
(%o2)                       [tpket, [[   ], [   ]]]
                                     [ 0 ]  [ 1 ]
@end group
@group
(%i1) declare([a,b],complex);
(%o1)                                done
(%i2) psi:a*ket(1)+b*ket(2);
(%o2)                            |2> b + |1> a
(%i3) psidag:dagger(psi);
(%o3)                 <2| conjugate(b) + <1| conjugate(a)
(%i4) psidag;
(%o4)                   b conjugate(b) + a conjugate(a)
@end group
@end example

The package is loaded with: @code{load(qm);}

@node Functions and Variables for qm, , Introduction to package qm, Top
@section Functions and Variables for qm

@defvr {Variable} hbar
Planck's constant divided by @code{2*%pi}. @code{hbar} is not given a
floating point value, but is declared to be a real number greater than
zero.
@end defvr

@anchor{ket}
@deffn {Function} ket ([@code{c@sub{1}},@code{c@sub{2}},@dots{}])
@code{ket} creates a @emph{column} vector of arbitrary finite
dimension. The entries @code{c@sub{i}} can be any Maxima expression.
The user must @code{declare} any relevant constants to be complex.
For a matrix representation the elements must be entered as a list
in @code{[@dots{}]} square brackets. If no list is entered the ket
is represented as a general ket, @code{ket(a)} will return @code{|a>}.
@end deffn

@example
@group
(%i1) kill(a);
(%o1)                                done
(%i2) ket(a);
(%o2)                                 |a>
(%i3) declare([c1,c2],complex);
(%o3)                                done
(%i4) ket([c1,c2]);
                                    [ c1 ]
(%o4)                               [    ]
                                    [ c2 ]
(%i5) facts();
(%o5) [kind(hbar, real), hbar > 0, kind(c1, complex), kind(c2, complex)]
@end group
@end example

@anchor{bra}
@deffn {Function} bra ([@code{c@sub{1}},@code{c@sub{2}},@dots{}])
@code{bra} creates a @emph{row} vector of arbitrary finite
dimension. The entries @code{c@sub{i}} can be any Maxima expression.
The user must @code{declare} any relevant constants to be complex.
For a matrix representation the elements must be entered as a list
in @code{[@dots{}]} square bracbras. If no list is entered the bra
is represented as a general bra, @code{bra(a)} will return @code{<a|}.
@end deffn

@example
@group
(%i1) kill(c1,c2);
(%o1)                                done
(%i2) bra(c1,c2);
(%o2)                              <c1, c2|
(%i3) bra([c1,c2]);
(%o3)                             [ c1  c2 ]
(%i4) facts();
(%o4)                    [kind(hbar, real), hbar > 0]
@end group
@end example

@anchor{ketp}
@deffn {Function} ketp (@emph{vector})
@code{ketp} is a predicate function that checks if its input is a ket,
in which case it returns @code{true}, else it returns @code{false}.
@code{ketp} only returns @code{true} for the matrix representation of a ket.
@end deffn

@example
@group
(%i1) kill(a,b,k);
(%o1)                                done
(%i2) k:ket(a,b);
(%o2)                               |a, b>
(%i3) ketp(k);
(%o3)                                false
(%i4) k:ket([a,b]);
                                     [ a ]
(%o4)                                [   ]
                                     [ b ]
(%i5) ketp(k);
(%o5)                                true
@end group
@end example

@anchor{brap}
@deffn {Function} brap (@emph{vector})
@code{brap} is a predicate function that checks if its input is a bra,
in which case it returns @code{true}, else it returns @code{false}.
@code{brap} only returns @code{true} for the matrix representation of a bra.
@end deffn

@example
@group
(%i1) b:bra([a,b]);
(%o1)                              [ a  b ]
(%i2) brap(b);
(%o2)                                true
@end group
@end example

@anchor{dagger}
@deffn {Function} dagger (@emph{vector})
@code{dagger} is the quantum mechanical @emph{dagger} function and returns
the @code{conjugate} @code{transpose} of its input.
@end deffn

@example
@group
(%i1) dagger(bra([%i,2]));
                                   [ - %i ]
(%o1)                              [      ]
                                   [  2   ]
@end group
@end example

@anchor{braket}
@deffn {Function} braket (@code{psi,phi})
Given two kets @code{psi} and @code{phi}, @code{braket} returns the
quantum mechanical bracket @code{<psi|phi>}. The vector @code{psi} may be
input as either a @code{ket} or @code{bra}. If it is a @code{ket} it will be
turned into a @code{bra} with the @code{dagger} function before the inner
product is taken. The vector @code{phi} must always be a @code{ket}.
@end deffn

@example
@group
(%i1) declare([a,b,c],complex);
(%o1)                                done
(%i2) braket(ket([a,b,c]),ket([a,b,c]));
(%o2)          c conjugate(c) + b conjugate(b) + a conjugate(a)
@end group
@end example

@anchor{norm}
@deffn {Function} norm (@code{psi})
Given a @code{ket} or @code{bra} @code{psi}, @code{norm} returns the
square root of the quantum mechanical bracket @code{<psi|psi>}.
The vector @code{psi} must always be a @code{ket}, otherwise the
function will return @code{false}.
@end deffn

@example
@group
(%i1) declare([a,b,c],complex);
(%o1)                                done
(%i2) norm(ket([a,b,c]));
(%o2)       sqrt(c conjugate(c) + b conjugate(b) + a conjugate(a))
(%i3) norm(ket(a,b,c));
(%o3)                           norm(|a, b, c>)
@end group
@end example

@deffn {Function} magsqr (@code{c})
@code{magsqr} returns @code{conjugate(c)*c}, the magnitude
squared of a complex number.
@end deffn

@example
@group
(%i1) declare([a,b,c,d],complex);
(%o1)                                done
(%i2) A:braket(ket([a,b]),ket([c,d]));
(%o2)                   conjugate(b) d + conjugate(a) c
(%i3) P:magsqr(A);
(%o3) (conjugate(b) d + conjugate(a) c) (b conjugate(d) + a conjugate(c))
@end group
@end example

@subsection Handling general kets and bras

General kets and bras are, as discussed, created without using a list
when giving the arguments. The following examples show how general
kets and bras can be manipulated.

@example
@group
(%i1) ket(a)+ket(b);
(%o1)                              |b> + |a>
(%i2) braket(bra(a),ket(b));
(%o2)                          kron_delta(a, b)
(%i3) braket(bra(a)+bra(c),ket(b));
(%o3)                 kron_delta(b, c) + kron_delta(a, b)
@end group
@end example

@subsection Spin-1/2 state kets and associated operators

Spin-1/2 particles are characterized by a simple 2-dimensional Hilbert
space of states. It is spanned by two vectors. In the @var{z}-basis
these vectors are @code{@{zp,zm@}}, and the basis kets in the
@var{z}-basis are @code{@{xp,xm@}} and @code{@{yp,ym@}} respectively.

@deffn {Function} zp
Return the @var{|z+>} ket in the @var{z}-basis.
@end deffn

@deffn {Function} zm
Return the @var{|z->} ket in the @var{z}-basis.
@end deffn

@deffn {Function} xp
Return the @var{|x+>} ket in the @var{z}-basis.
@end deffn

@deffn {Function} xm
Return the @var{|x->} ket in the @var{z}-basis.
@end deffn

@deffn {Function} yp
Return the @var{|y+>} ket in the @var{z}-basis.
@end deffn

@deffn {Function} ym
Return the @var{|y->} ket in the @var{z}-basis.
@end deffn

@example
@group
(%i1) zp;
                                     [ 1 ]
(%o1)                                [   ]
                                     [ 0 ]
(%i2) zm;
                                     [ 0 ]
(%o2)                                [   ]
                                     [ 1 ]
@end group
@group
(%i1) yp;
                                  [    1    ]
                                  [ ------- ]
                                  [ sqrt(2) ]
(%o1)                             [         ]
                                  [   %i    ]
                                  [ ------- ]
                                  [ sqrt(2) ]
(%i2) ym;
                                 [     1     ]
                                 [  -------  ]
                                 [  sqrt(2)  ]
(%o2)                            [           ]
                                 [     %i    ]
                                 [ - ------- ]
                                 [   sqrt(2) ]
@end group
@group
(%i1) braket(xp,zp);
                                       1
(%o1)                               -------
                                    sqrt(2)
@end group
@end example

Switching bases is done in the following example where a @var{z}-basis
ket is constructed and the @var{x}-basis ket is computed.

@example
@group
(%i1) declare([a,b],complex);
(%o1)                                done
(%i2) psi:ket([a,b]);
                                     [ a ]
(%o2)                                [   ]
                                     [ b ]
(%i3) psi_x:'xp*braket(xp,psi)+'xm*braket(xm,psi);
                    b         a              a         b
(%o3)           (------- + -------) xp + (------- - -------) xm
                 sqrt(2)   sqrt(2)        sqrt(2)   sqrt(2)
@end group
@end example

@subsection Pauli matrices and Sz, Sx, Sy operators

@deffn {Function} @code{sigmax}
Returns the Pauli @var{x} matrix.
@end deffn

@deffn {Function} @code{sigmay}
Returns the Pauli @var{y} matrix.
@end deffn

@deffn {Function} @code{sigmaz}
Returns the Pauli @var{z} matrix.
@end deffn

@deffn {Function} @code{Sx}
Returns the spin-1/2 @var{Sx} matrix.
@end deffn

@deffn {Function} @code{Sy}
Returns the spin-1/2 @var{Sy} matrix.
@end deffn

@deffn {Function} @code{Sz}
Returns the spin-1/2 @var{Sz} matrix.
@end deffn

@example
@group
(%i1) sigmay;
                                 [ 0   - %i ]
(%o1)                            [          ]
                                 [ %i   0   ]
(%i2) Sy;
                            [            %i hbar ]
                            [    0     - ------- ]
                            [               2    ]
(%o2)                       [                    ]
                            [ %i hbar            ]
                            [ -------      0     ]
                            [    2               ]
@end group
@end example

@deffn {Function} commutator (@code{X,Y})
Given two operators @code{X} and @code{Y}, return the
commutator @code{X . Y - Y . X}.
@end deffn

@example
@group
(%i1) commutator(Sx,Sy);
                           [        2             ]
                           [ %i hbar              ]
                           [ --------      0      ]
                           [    2                 ]
(%o1)                      [                      ]
                           [                    2 ]
                           [             %i hbar  ]
                           [    0      - -------- ]
                           [                2     ]
@end group
@end example

@subsection SX, SY, SZ operators for any spin

@deffn {Function} SX (@code{s})
@code{SX(s)} for spin @code{s} returns the matrix representation of the
spin operator @code{Sx}. Shortcuts for spin-1/2 are @code{Sx,Sy,Sz}, and
for spin-1 are @code{Sx1,Sy1,Sz1}.
@end deffn

@deffn {Function} SY (@code{s})
@code{SY(s)} for spin @code{s} returns the matrix representation of the
spin operator @code{Sy}. Shortcuts for spin-1/2 are @code{Sx,Sy,Sz}, and
for spin-1 are @code{Sx1,Sy1,Sz1}.
@end deffn

@deffn {Function} SZ (@code{s})
@code{SZ(s)} for spin @code{s} returns the matrix representation of the
spin operator @code{Sz}. Shortcuts for spin-1/2 are @code{Sx,Sy,Sz}, and
for spin-1 are @code{Sx1,Sy1,Sz1}.
@end deffn

Example:

@example
@group
(%i1) SY(1/2);
                            [            %i hbar ]
                            [    0     - ------- ]
                            [               2    ]
(%o1)                       [                    ]
                            [ %i hbar            ]
                            [ -------      0     ]
                            [    2               ]
(%i2) SX(1);
                         [           hbar            ]
                         [    0     -------     0    ]
                         [          sqrt(2)          ]
                         [                           ]
                         [  hbar              hbar   ]
(%o2)                    [ -------     0     ------- ]
                         [ sqrt(2)           sqrt(2) ]
                         [                           ]
                         [           hbar            ]
                         [    0     -------     0    ]
                         [          sqrt(2)          ]
@end group
@end example

@subsection Expectation value and variance

@deffn {Function} expect (@code{O,psi})
Computes the quantum mechanical expectation value of the operator @code{O}
in state @code{psi}, @code{<psi|O|psi>}.
@end deffn

@example
@group
(%i1) ev(expect(Sy,xp+ym),ratsimp);
(%o1)                               - hbar
@end group
@end example

@deffn {Function} qm_variance (@code{O,psi})
Computes the quantum mechanical variance of the operator @code{O}
in state @code{psi}, @code{sqrt(<psi|O@sup{2}|psi> - <psi|O|psi>@sup{2})}.
@end deffn

@example
@group
(%i1) ev(qm_variance(Sy,xp+ym),ratsimp);
                                    %i hbar
(%o1)                               -------
                                       2
@end group
@end example

@subsection Angular momentum representation of kets and bras

To create kets and bras in the @var{|j,m>} representation you can use
the following functions.

@deffn {Function} jm_ket (@code{j,m})
@code{jm_ket} creates the ket @var{|j,m>} for total spin @var{j}
and @var{z}-component @var{m}.
@end deffn

@deffn {Function} jm_bra (@code{j,m})
@code{jm_bra} creates the bra @var{<j,m|} for total spin @var{j}
and @var{z}-component @var{m}.
@end deffn

@example
@group
(%i1) jm_bra(3/2,1/2);
                                        3  1
(%o1)                            jm_bra(-, -)
                                        2  2
(%i2) jm_bra([3/2,1/2]);
                                       [ 3  1 ]
(%o2)                          [jmbra, [ -  - ]]
                                       [ 2  2 ]
@end group
@end example

@deffn {Function} jm_ketp (jmket)
@code{jm_ketp} checks to see that the ket has the 'jmket' marker.
@end deffn

@example
@group
(%i1) jm_ketp(jm_ket(j,m));
(%o1)                                false
(%i2) jm_ketp(jm_ket([j,m]));
(%o2)                                true
@end group
@end example


@deffn {Function} jm_brap (jmbra)
@code{jm_brap} checks to see that the bra has the 'jmbra' marker.
@end deffn

@deffn {Function} jm_check (@code{j,m})
@code{jm_check} checks to see that @var{m} is one of @{-j, @dots{}, +j@}.
@end deffn

@example
@group
(%i1) jm_check(3/2,1/2);
(%o1)                                true
@end group
@end example


@deffn {Function} jm_braket (@emph{jmbra,jmket})
@code{jm_braket} takes the inner product of the jm-kets.
@end deffn

@example
@group
(%i1) K:jm_ket(j1,m1);
(%o1)                           jm_ket(j1, m1)
(%i2) B:jm_bra(j2,m2);
(%o2)                           jm_bra(j2, m2)
(%i3) jm_braket(B,K);
(%o3)                kron_delta(j1, j2) kron_delta(m1, m2)
(%i4) B:jm_bra(j1,m1);
(%o4)                           jm_bra(j1, m1)
(%i5) jm_braket(B,K);
(%o5)                                  1
(%i6) K:jm_ket([j1,m1]);
(%o6)                         [jmket, [ j1  m1 ]]
(%i7) B:jm_bra([j2,m2]);
(%o7)                         [jmbra, [ j2  m2 ]]
(%i8) jm_braket(B,K);
(%o8)                                  0
(%i9) jm_braket(jm_bra(j1,m1)+jm_bra(j3,m3),jm_ket(j2,m2));
(%o9) kron_delta(j2, j3) kron_delta(m2, m3)
                                        + kron_delta(j1, j2) kron_delta(m1, m2)
@end group
@end example

@deffn {Function} JP (@emph{jmket})
@code{JP} is the @code{J@sub{+}} operator. It takes a @code{jmket}
@code{jm_ket(j,m)} and returns @code{sqrt(j*(j+1)-m*(m+1))*hbar*jm_ket(j,m+1)}.
@end deffn

@deffn {Function} JM (@emph{jmket})
@code{JM} is the @code{J@sub{-}} operator. It takes a @code{jmket}
@code{jm_ket(j,m)} and returns @code{sqrt(j*(j+1)-m*(m-1))*hbar*jm_ket(j,m-1)}.
@end deffn

@deffn {Function} Jsqr (@emph{jmket})
@code{Jsqr} is the @code{J@sup{2}} operator. It takes a @code{jmket}
@code{jm_ket(j,m)} and returns @code{(j*(j+1)*hbar@sup{2}*jm_ket(j,m)}.
@end deffn

@deffn {Function} Jz (@emph{jmket})
@code{Jz} is the @code{J@sub{z}} operator. It takes a @code{jmket}
@code{jm_ket(j,m)} and returns @code{m*hbar*jm_ket(j,m)}.
@end deffn

These functions are illustrated below.

@example
@group
(%i1) k:jm_ket([j,m]);
(%o1)                          [jmket, [ j  m ]]
(%i2) JP(k);
(%o2)          hbar jm_ket(j, m + 1) sqrt(j (j + 1) - m (m + 1))
(%i3) JM(k);
(%o3)          hbar jm_ket(j, m - 1) sqrt(j (j + 1) - (m - 1) m)
(%i4) Jsqr(k);
                             2
(%o4)                    hbar  j (j + 1) jm_ket(j, m)
(%i5) Jz(k);
(%o5)                         hbar jm_ket(j, m) m
@end group
@end example

@subsection Angular momentum and ladder operators

@deffn {Function} SP (@code{s})
@code{SP} is the raising ladder operator @var{S@sub{+}} for spin @code{s}.
@end deffn

@deffn {Function} SM (@code{s})
@code{SM} is the raising ladder operator @var{S@sub{-}} for spin @code{s}.
@end deffn

Examples of the ladder operators:

@example
@group
(%i1) SP(1);
                       [ 0  sqrt(2) hbar       0       ]
                       [                               ]
(%o1)                  [ 0       0        sqrt(2) hbar ]
                       [                               ]
                       [ 0       0             0       ]
(%i2) SM(1);
                       [      0             0        0 ]
                       [                               ]
(%o2)                  [ sqrt(2) hbar       0        0 ]
                       [                               ]
                       [      0        sqrt(2) hbar  0 ]
@end group
@end example

@section Rotation operators

@deffn {Function} RX (@code{s,t})
@code{RX(s)} for spin @code{s} returns the matrix representation of the
rotation operator @code{Rx} for rotation through angle @code{t}.
@end deffn

@deffn {Function} RY (@code{s,t})
@code{RY(s)} for spin @code{s} returns the matrix representation of the
rotation operator @code{Ry} for rotation through angle @code{t}.
@end deffn

@deffn {Function} RZ (@code{s,t})
@code{RZ(s)} for spin @code{s} returns the matrix representation of the
rotation operator @code{Rz} for rotation through angle @code{t}.
@end deffn

@example
@group
(%i1) RZ(1/2,t);
Proviso: assuming 64*t # 0 
                             [     %i t         ]
                             [   - ----         ]
                             [      2           ]
                             [ %e          0    ]
(%o1)                        [                  ]
                             [             %i t ]
                             [             ---- ]
                             [              2   ]
                             [    0      %e     ]
@end group
@end example

@section Time-evolution operator

@deffn {Function} UU (@code{H,t})
@code{UU(H,t)} is the time evolution operator for Hamiltonian @code{H}. It
is defined as the matrix exponential @code{matrixexp(-%i*H*t/hbar)}.
@end deffn

@example
@group
(%i1) UU(w*Sy,t);
Proviso: assuming 64*t*w # 0 
                           [     t w         t w  ]
                           [ cos(---)  - sin(---) ]
                           [      2           2   ]
(%o1)                      [                      ]
                           [     t w        t w   ]
                           [ sin(---)   cos(---)  ]
                           [      2          2    ]
@end group
@end example

@section Tensor products

Tensor products are represented as lists in Maxima. The ket tensor
product @code{|z+,z+>} is represented as @code{[tpket,zp,zp]}, and the bra
tensor product @code{<a,b|} is represented as @code{[tpbra,a,b]} for kets
@code{a} and @code{b}. The list labels @code{tpket} and @code{tpbra}
ensure calculations are performed with the correct kind of objects.

@deffn {Function} ketprod (@code{k@sub{1}}, @code{k@sub{2}}, @dots{})
@code{ketprod} produces a tensor product of kets @code{k@sub{i}}. All
of the elements must pass the @code{ketp} predicate test to be
accepted.
@end deffn

@deffn {Function} braprod (@code{b@sub{1}}, @code{b@sub{2}}, @dots{})
@code{braprod} produces a tensor product of bras @code{b@sub{i}}. All
of the elements must pass the @code{brap} predicate test to be
accepted.
@end deffn

@deffn {Function} braketprod (@code{B,K})
@code{braketprod} takes the inner product of the tensor products
@code{B} and @code{K}. The tensor products must be of the same length
(number of kets must equal the number of bras).
@end deffn

Examples below show how to create tensor products and take
the bracket of tensor products.

@example
@group
(%i1) ketprod(zp,zm);
                                     [ 1 ]  [ 0 ]
(%o1)                        ketprod([   ], [   ])
                                     [ 0 ]  [ 1 ]
(%i2) ketprod('zp,'zm);
(%o2)                           ketprod(zp, zm)
@end group
@group
(%i1) kill(a,b,c,d);
(%o1)                                done
(%i2) declare([a,b,c,d],complex);
(%o2)                                done
(%i3) braprod(bra([a,b]),bra([c,d]));
(%o3)                     braprod([ a  b ], [ c  d ])
(%i4) braprod(dagger(zp),bra([c,d]));
(%o4)                     braprod([ 1  0 ], [ c  d ])
@end group
@group
(%i1) K:ketprod(zp,zm);
                                     [ 1 ]  [ 0 ]
(%o1)                        ketprod([   ], [   ])
                                     [ 0 ]  [ 1 ]
(%i2) zpb:dagger(zp);
(%o2)                              [ 1  0 ]
(%i3) zmb:dagger(zm);
(%o3)                              [ 0  1 ]
(%i4) B:braprod(zpb,zmb);
(%o4)                     braprod([ 1  0 ], [ 0  1 ])
(%i5) braketprod(K,B);
(%o5)                                false
(%i6) braketprod(B,K);
(%o6)                                false
@end group
@end example

@node Function and Variable Index, , Top, Top
@appendix Function and Variable index
@printindex fn
@printindex vr

@bye
