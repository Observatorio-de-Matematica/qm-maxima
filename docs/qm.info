This is qm.info, produced by makeinfo version 7.1 from qm.texi.

INFO-DIR-SECTION Mathematics/Maxima
START-INFO-DIR-ENTRY
* Package qm: (maxima) Maxima share package qm for quantum mechanics
END-INFO-DIR-ENTRY

* Menu:

* Introduction to package qm::
* Functions and Variables for qm::


File: qm.info,  Node: Top,  Next: Introduction to package qm,  Prev: (dir),  Up: (dir)

Package qm
**********

* Menu:

* Introduction to package qm::
* Functions and Variables for qm::

 -- The Detailed Node Listing --

* Introduction to package qm::
* Functions and Variables for qm::


1 Package qm
************


File: qm.info,  Node: Introduction to package qm,  Next: Functions and Variables for qm,  Prev: Top,  Up: Top

1.1 Introduction to package qm
==============================

The ‘qm’ package was written by Eric Majzoub, University of Missouri.
Email: majzoube-at-umsystem.edu

   The package is loaded with: ‘load(qm);’

   The ‘qm’ package provides functions and standard definitions to solve
quantum mechanics problems in a finite dimensional Hilbert space.  For
example, one can calculate the outcome of Stern-Gerlach experiments
using the built-in definition of the Sx, Sy, and Sz operators for
arbitrary spin, e.g.  ‘s={1/2, 1, 3/2, ...}’.  For spin-1/2 the standard
basis states in the ‘x’, ‘y’, and ‘z’-basis are available as ‘{xp,xm}’,
‘{yp,ym}’, and ‘{zp,zm}’, respectively.  One can create general ket
vectors with arbitrary but finite dimension and perform standard
computations such as expectation value, variance, etc.  The angular
momentum <|j,m>> representation of kets is also available.  It is also
possible to create tensor product states for multiparticle systems and
to perform calculations on those systems.

   Let us consider a simple example involving spin-1/2 particles.  A bra
vector in the ‘z’-basis may be written as

   ‘<psi| = a <z+| + b <z-|’.

   The bra will be represented in Maxima by the row vector ‘[a b]’,
where the basis vectors are

   ‘<z+| = [1 0]’

   and

   ‘<z-| = [0 1]’.

   There are two types of kets and bras available in this package, the
first type is given by a _matrix representation_, as in the above
example.  ‘ket’s are column vectors and ‘bra’s are row vectors, and
their components are entered as Maxima _lists_ in the ‘bra’ and ‘ket’
functions.  The second type of bra or ket is _abstract_; there is no
matrix representation.  Abstract bras and kets are entered _without_
using lists for the elements.  Thus, if one wishes to do purely symbolic
calculations, then input of abstract kets, (j,m)-kets, and so forth
should be done without lists.  If one wishes to do numerical or
component computations using the kets then enter the arguments as a
list.  Note that abstract kets and bras are _assumed to be orthonormal_.

   The following examples illustrate some of the basic capabilities of
the ‘qm’ package.  Here both abstract, and concrete kets are shown.

     (%i1) ket(a,b)+ket(c,d);
     (%o1)                           |c, d> + |a, b>
     (%i2) ket([a,b,c])+ket([d,e,f]);
                                        [ d + a ]
                                        [       ]
     (%o2)                              [ e + b ]
                                        [       ]
                                        [ f + c ]

   Next, tensor products of the spin-1/2 basis states ‘{zp,zm}’ are
shown in abstract and matrix representations.

     (%i1) tpket('zp,'zm)+tpket('zm,'zp);
     (%o1)                    tpket(zp, zm) + tpket(zm, zp)
     (%i2) tpket([zp,zm]);
                                          [ 1 ]  [ 0 ]
     (%o2)                       [tpket, [[   ], [   ]]]
                                          [ 0 ]  [ 1 ]

   Abstract kets and bras are assumed to be orthonormal as shown in the
following example.

     (%i1) declare([a,b],complex);
     (%o1)                                done
     (%i2) psi:a*ket(1)+b*ket(2);
     (%o2)                            |2> b + |1> a
     (%i3) psidag:dagger(psi);
     (%o3)                 <2| conjugate(b) + <1| conjugate(a)
     (%i4) psidag . psi;
     (%o4)                   b conjugate(b) + a conjugate(a)

   The following example show how to declare a ket with both real and
complex components in the matrix representation.

     (%i1) declare([c1,c2],complex,r,real);
     (%o1)                                done
     (%i2) k:ket([c1,c2,r]);
                                         [ c1 ]
                                         [    ]
     (%o2)                               [ c2 ]
                                         [    ]
                                         [ r  ]
     (%i3) b:dagger(k);
     (%o3)                 [ conjugate(c1)  conjugate(c2)  r ]
     (%i4) b . k;
                         2
     (%o4)              r  + c2 conjugate(c2) + c1 conjugate(c1)


File: qm.info,  Node: Functions and Variables for qm,  Prev: Introduction to package qm,  Up: Top

1.2 Functions and Variables for qm
==================================

 -- Variable: hbar
     Planck's constant divided by ‘2*%pi’.  ‘hbar’ is not given a
     floating point value, but is declared to be a real number greater
     than zero.

 -- Function: ket ([c_{1},c_{2},...])
     ‘ket’ creates a _column_ vector of arbitrary finite dimension.  The
     entries ‘c_{i}’ can be any Maxima expression.  The user must
     ‘declare’ any relevant constants to be complex.  For a matrix
     representation the elements must be entered as a list in ‘[...]’
     square brackets.  If no list is entered the ket is represented as a
     general ket, ‘ket(a)’ will return ‘|a>’.

     (%i1) kill(a);
     (%o1)                                done
     (%i2) ket(a);
     (%o2)                                 |a>
     (%i3) declare([c1,c2],complex);
     (%o3)                                done
     (%i4) ket([c1,c2]);
                                         [ c1 ]
     (%o4)                               [    ]
                                         [ c2 ]
     (%i5) facts();
     (%o5) [kind(hbar, real), hbar > 0, kind(c1, complex), kind(c2, complex)]

 -- Function: bra ([c_{1},c_{2},...])
     ‘bra’ creates a _row_ vector of arbitrary finite dimension.  The
     entries ‘c_{i}’ can be any Maxima expression.  The user must
     ‘declare’ any relevant constants to be complex.  For a matrix
     representation the elements must be entered as a list in ‘[...]’
     square bracbras.  If no list is entered the bra is represented as a
     general bra, ‘bra(a)’ will return ‘<a|’.

     (%i1) kill(c1,c2);
     (%o1)                                done
     (%i2) bra(c1,c2);
     (%o2)                              <c1, c2|
     (%i3) bra([c1,c2]);
     (%o3)                             [ c1  c2 ]
     (%i4) facts();
     (%o4)                    [kind(hbar, real), hbar > 0]

 -- Function: ketp (_vector_)
     ‘ketp’ is a predicate function that checks if its input is a ket,
     in which case it returns ‘true’, else it returns ‘false’.  ‘ketp’
     only returns ‘true’ for the matrix representation of a ket.

     (%i1) kill(a,b,k);
     (%o1)                                done
     (%i2) k:ket(a,b);
     (%o2)                               |a, b>
     (%i3) ketp(k);
     (%o3)                                false
     (%i4) k:ket([a,b]);
                                          [ a ]
     (%o4)                                [   ]
                                          [ b ]
     (%i5) ketp(k);
     (%o5)                                true

 -- Function: brap (_vector_)
     ‘brap’ is a predicate function that checks if its input is a bra,
     in which case it returns ‘true’, else it returns ‘false’.  ‘brap’
     only returns ‘true’ for the matrix representation of a bra.

     (%i1) b:bra([a,b]);
     (%o1)                              [ a  b ]
     (%i2) brap(b);
     (%o2)                                true

   Two additional functions are provided to create kets and bras in the
matrix representation.  Additionally these functions attempt to
automatically ‘declare’ constants as complex.  For example, if a list
entry is ‘a*sin(x)+b*cos(x)’ then only ‘a’ and ‘b’ will be ‘declare’-d
complex and not ‘x’.

 -- Function: autoket ([a_{1},a_{2},...])
     ‘autoket’ takes a list [‘a_{1},a_{2},...’] and returns a ket with
     the coefficients ‘a_{i}’ ‘declare’-d complex.  Simple expressions
     such as ‘a*sin(x)+b*cos(x)’ are allowed and will ‘declare’ only the
     coefficients as complex.

     (%i1) autoket([a,b]);
                                          [ a ]
     (%o1)                                [   ]
                                          [ b ]
     (%i2) facts();
     (%o2)  [kind(hbar, real), hbar > 0, kind(a, complex), kind(b, complex)]
     (%i1) autoket([a*sin(x),b*sin(x)]);
                                      [ a sin(x) ]
     (%o1)                            [          ]
                                      [ b sin(x) ]
     (%i2) facts();
     (%o2)  [kind(hbar, real), hbar > 0, kind(a, complex), kind(b, complex)]

 -- Function: autobra ([a_{1},a_{2},...])
     ‘autobra’ takes a list [‘a_{1},a_{2},...’] and returns a bra with
     the coefficients ‘a_{i}’ ‘declare’-d complex.  Simple expressions
     such as ‘a*sin(x)+b*cos(x)’ are allowed and will ‘declare’ only the
     coefficients as complex.

     (%i1) autobra([a,b]);
     (%o1)                              [ a  b ]
     (%i2) facts();
     (%o2)  [kind(hbar, real), hbar > 0, kind(a, complex), kind(b, complex)]
     (%i1) autobra([a*sin(x),b]);
     (%o1)                           [ a sin(x)  b ]
     (%i2) facts();
     (%o2)  [kind(hbar, real), hbar > 0, kind(a, complex), kind(b, complex)]

 -- Function: dagger (_vector_)
     ‘dagger’ is the quantum mechanical _dagger_ function and returns
     the ‘conjugate’ ‘transpose’ of its input.

     (%i1) dagger(bra([%i,2]));
                                        [ - %i ]
     (%o1)                              [      ]
                                        [  2   ]

 -- Function: braket (psi,phi)
     Given two kets ‘psi’ and ‘phi’, ‘braket’ returns the quantum
     mechanical bracket ‘<psi|phi>’.  The vector ‘psi’ may be input as
     either a ‘ket’ or ‘bra’.  If it is a ‘ket’ it will be turned into a
     ‘bra’ with the ‘dagger’ function before the inner product is taken.
     The vector ‘phi’ must always be a ‘ket’.

     (%i1) declare([a,b,c],complex);
     (%o1)                                done
     (%i2) braket(ket([a,b,c]),ket([a,b,c]));
     (%o2)          c conjugate(c) + b conjugate(b) + a conjugate(a)

 -- Function: norm (psi)
     Given a ‘ket’ or ‘bra’ ‘psi’, ‘norm’ returns the square root of the
     quantum mechanical bracket ‘<psi|psi>’.  The vector ‘psi’ must
     always be a ‘ket’, otherwise the function will return ‘false’.

     (%i1) declare([a,b,c],complex);
     (%o1)                                done
     (%i2) norm(ket([a,b,c]));
     (%o2)       sqrt(c conjugate(c) + b conjugate(b) + a conjugate(a))
     (%i3) norm(ket(a,b,c));
     (%o3)                           norm(|a, b, c>)

 -- Function: magsqr (c)
     ‘magsqr’ returns ‘conjugate(c)*c’, the magnitude squared of a
     complex number.

     (%i1) declare([a,b,c,d],complex);
     (%o1)                                done
     (%i2) A:braket(ket([a,b]),ket([c,d]));
     (%o2)                   conjugate(b) d + conjugate(a) c
     (%i3) P:magsqr(A);
     (%o3) (conjugate(b) d + conjugate(a) c) (b conjugate(d) + a conjugate(c))

1.2.1 Handling general kets and bras
------------------------------------

General kets and bras are, as discussed, created without using a list
when giving the arguments.  The following examples show how general kets
and bras can be manipulated.

     (%i1) ket(a)+ket(b);
     (%o1)                              |b> + |a>
     (%i2) braket(bra(a),ket(b));
     (%o2)                          kron_delta(a, b)
     (%i3) braket(bra(a)+bra(c),ket(b));
     (%o3)                 kron_delta(b, c) + kron_delta(a, b)

1.2.2 Spin-1/2 state kets and associated operators
--------------------------------------------------

Spin-1/2 particles are characterized by a simple 2-dimensional Hilbert
space of states.  It is spanned by two vectors.  In the <z>-basis these
vectors are ‘{zp,zm}’, and the basis kets in the <z>-basis are ‘{xp,xm}’
and ‘{yp,ym}’ respectively.

 -- Function: zp
     Return the <|z+>> ket in the <z>-basis.

 -- Function: zm
     Return the <|z->> ket in the <z>-basis.

 -- Function: xp
     Return the <|x+>> ket in the <z>-basis.

 -- Function: xm
     Return the <|x->> ket in the <z>-basis.

 -- Function: yp
     Return the <|y+>> ket in the <z>-basis.

 -- Function: ym
     Return the <|y->> ket in the <z>-basis.

     (%i1) zp;
                                          [ 1 ]
     (%o1)                                [   ]
                                          [ 0 ]
     (%i2) zm;
                                          [ 0 ]
     (%o2)                                [   ]
                                          [ 1 ]
     (%i1) yp;
                                       [    1    ]
                                       [ ------- ]
                                       [ sqrt(2) ]
     (%o1)                             [         ]
                                       [   %i    ]
                                       [ ------- ]
                                       [ sqrt(2) ]
     (%i2) ym;
                                      [     1     ]
                                      [  -------  ]
                                      [  sqrt(2)  ]
     (%o2)                            [           ]
                                      [     %i    ]
                                      [ - ------- ]
                                      [   sqrt(2) ]
     (%i1) braket(xp,zp);
                                            1
     (%o1)                               -------
                                         sqrt(2)

   Switching bases is done in the following example where a <z>-basis
ket is constructed and the <x>-basis ket is computed.

     (%i1) declare([a,b],complex);
     (%o1)                                done
     (%i2) psi:ket([a,b]);
                                          [ a ]
     (%o2)                                [   ]
                                          [ b ]
     (%i3) psi_x:'xp*braket(xp,psi)+'xm*braket(xm,psi);
                         b         a              a         b
     (%o3)           (------- + -------) xp + (------- - -------) xm
                      sqrt(2)   sqrt(2)        sqrt(2)   sqrt(2)

1.2.3 Pauli matrices and Sz, Sx, Sy operators
---------------------------------------------

 -- Function: sigmax
     Returns the Pauli <x> matrix.

 -- Function: sigmay
     Returns the Pauli <y> matrix.

 -- Function: sigmaz
     Returns the Pauli <z> matrix.

 -- Function: Sx
     Returns the spin-1/2 <Sx> matrix.

 -- Function: Sy
     Returns the spin-1/2 <Sy> matrix.

 -- Function: Sz
     Returns the spin-1/2 <Sz> matrix.

     (%i1) sigmay;
                                      [ 0   - %i ]
     (%o1)                            [          ]
                                      [ %i   0   ]
     (%i2) Sy;
                                 [            %i hbar ]
                                 [    0     - ------- ]
                                 [               2    ]
     (%o2)                       [                    ]
                                 [ %i hbar            ]
                                 [ -------      0     ]
                                 [    2               ]

 -- Function: commutator (X,Y)
     Given two operators ‘X’ and ‘Y’, return the commutator ‘X . Y - Y .
     X’.

     (%i1) commutator(Sx,Sy);
                                [        2             ]
                                [ %i hbar              ]
                                [ --------      0      ]
                                [    2                 ]
     (%o1)                      [                      ]
                                [                    2 ]
                                [             %i hbar  ]
                                [    0      - -------- ]
                                [                2     ]

1.2.4 SX, SY, SZ operators for any spin
---------------------------------------

 -- Function: SX (s)
     ‘SX(s)’ for spin ‘s’ returns the matrix representation of the spin
     operator ‘Sx’.  Shortcuts for spin-1/2 are ‘Sx,Sy,Sz’, and for
     spin-1 are ‘Sx1,Sy1,Sz1’.

 -- Function: SY (s)
     ‘SY(s)’ for spin ‘s’ returns the matrix representation of the spin
     operator ‘Sy’.  Shortcuts for spin-1/2 are ‘Sx,Sy,Sz’, and for
     spin-1 are ‘Sx1,Sy1,Sz1’.

 -- Function: SZ (s)
     ‘SZ(s)’ for spin ‘s’ returns the matrix representation of the spin
     operator ‘Sz’.  Shortcuts for spin-1/2 are ‘Sx,Sy,Sz’, and for
     spin-1 are ‘Sx1,Sy1,Sz1’.

   Example:

     (%i1) SY(1/2);
                                 [            %i hbar ]
                                 [    0     - ------- ]
                                 [               2    ]
     (%o1)                       [                    ]
                                 [ %i hbar            ]
                                 [ -------      0     ]
                                 [    2               ]
     (%i2) SX(1);
                              [           hbar            ]
                              [    0     -------     0    ]
                              [          sqrt(2)          ]
                              [                           ]
                              [  hbar              hbar   ]
     (%o2)                    [ -------     0     ------- ]
                              [ sqrt(2)           sqrt(2) ]
                              [                           ]
                              [           hbar            ]
                              [    0     -------     0    ]
                              [          sqrt(2)          ]

1.2.5 Expectation value and variance
------------------------------------

 -- Function: expect (O,psi)
     Computes the quantum mechanical expectation value of the operator
     ‘O’ in state ‘psi’, ‘<psi|O|psi>’.

     (%i1) ev(expect(Sy,xp+ym),ratsimp);
     (%o1)                               - hbar

 -- Function: qm_variance (O,psi)
     Computes the quantum mechanical variance of the operator ‘O’ in
     state ‘psi’, ‘sqrt(<psi|O^{2}|psi> - <psi|O|psi>^{2})’.

     (%i1) ev(qm_variance(Sy,xp+ym),ratsimp);
                                         %i hbar
     (%o1)                               -------
                                            2

1.2.6 Angular momentum representation of kets and bras
------------------------------------------------------

To create kets and bras in the <|j,m>> representation you can use the
following functions.

 -- Function: jmket (j,m)
     ‘jmket’ creates the ket <|j,m>> for total spin <j> and
     <z>-component <m>.

 -- Function: jmbra (j,m)
     ‘jmbra’ creates the bra <<j,m|> for total spin <j> and
     <z>-component <m>.

     (%i1) jmbra(3/2,1/2);
                                             3  1
     (%o1)                             jmbra(-, -)
                                             2  2
     (%i2) jmbra([3/2,1/2]);
                                            [ 3  1 ]
     (%o2)                          [jmbra, [ -  - ]]
                                            [ 2  2 ]

 -- Function: jmketp (jmket)
     ‘jmketp’ checks to see that the ket has the 'jmket' marker.

     (%i1) jmketp(jmket(j,m));
     (%o1)                                false
     (%i2) jmketp(jmket([j,m]));
     (%o2)                                true

 -- Function: jmbrap (jmbra)
     ‘jmbrap’ checks to see that the bra has the 'jmbra' marker.

 -- Function: jmcheck (j,m)
     ‘jmcheck’ checks to see that <m> is one of {-j, ..., +j}.

     (%i1) jmcheck(3/2,1/2);
     (%o1)                                true

 -- Function: jmbraket (_jmbra,jmket_)
     ‘jmbraket’ takes the inner product of the jm-kets.

     (%i1) K:jmket(j1,m1);
     (%o1)                            jmket(j1, m1)
     (%i2) B:jmbra(j2,m2);
     (%o2)                            jmbra(j2, m2)
     (%i3) jmbraket(B,K);
     (%o3)                kron_delta(j1, j2) kron_delta(m1, m2)
     (%i4) B:jmbra(j1,m1);
     (%o4)                            jmbra(j1, m1)
     (%i5) jmbraket(B,K);
     (%o5)                                  1
     (%i6) K:jmket([3/2,1/2]);
                                            [ 3  1 ]
     (%o6)                          [jmket, [ -  - ]]
                                            [ 2  2 ]
     (%i7) B:jmbra([3/2,1/2]);
                                            [ 3  1 ]
     (%o7)                          [jmbra, [ -  - ]]
                                            [ 2  2 ]
     (%i8) jmbraket(B,K);
     (%o8)                                  1
     (%i9) jmbraket(jmbra(j1,m1),jmket(j2,m2));
     (%o9)                kron_delta(j1, j2) kron_delta(m1, m2)

 -- Function: JP (_jmket_)
     ‘JP’ is the ‘J_{+}’ operator.  It takes a ‘jmket’ ‘jmket(j,m)’ and
     returns ‘sqrt(j*(j+1)-m*(m+1))*hbar*jmket(j,m+1)’.

 -- Function: JM (_jmket_)
     ‘JM’ is the ‘J_{-}’ operator.  It takes a ‘jmket’ ‘jmket(j,m)’ and
     returns ‘sqrt(j*(j+1)-m*(m-1))*hbar*jmket(j,m-1)’.

 -- Function: Jsqr (_jmket_)
     ‘Jsqr’ is the ‘J^{2}’ operator.  It takes a ‘jmket’ ‘jmket(j,m)’
     and returns ‘(j*(j+1)*hbar^{2}*jmket(j,m)’.

 -- Function: Jz (_jmket_)
     ‘Jz’ is the ‘J_{z}’ operator.  It takes a ‘jmket’ ‘jmket(j,m)’ and
     returns ‘m*hbar*jmket(j,m)’.

   These functions are illustrated below.

     (%i1) k:jmket([j,m]);
     (%o1)                          [jmket, [ j  m ]]
     (%i2) JP(k);
     (%o2)          hbar jmket(j, m + 1) sqrt(j (j + 1) - m (m + 1))
     (%i3) JM(k);
     (%o3)          hbar jmket(j, m - 1) sqrt(j (j + 1) - (m - 1) m)
     (%i4) Jsqr(k);
                                   2
     (%o4)                     hbar  j (j + 1) jmket(j, m)
     (%i5) Jz(k);
     (%o5)                         hbar jmket(j, m) m

1.2.7 Angular momentum and ladder operators
-------------------------------------------

 -- Function: SP (s)
     ‘SP’ is the raising ladder operator <S_{+}> for spin ‘s’.

 -- Function: SM (s)
     ‘SM’ is the raising ladder operator <S_{-}> for spin ‘s’.

   Examples of the ladder operators:

     (%i1) SP(1);
                            [ 0  sqrt(2) hbar       0       ]
                            [                               ]
     (%o1)                  [ 0       0        sqrt(2) hbar ]
                            [                               ]
                            [ 0       0             0       ]
     (%i2) SM(1);
                            [      0             0        0 ]
                            [                               ]
     (%o2)                  [ sqrt(2) hbar       0        0 ]
                            [                               ]
                            [      0        sqrt(2) hbar  0 ]

1.3 Rotation operators
======================

 -- Function: RX (s,t)
     ‘RX(s)’ for spin ‘s’ returns the matrix representation of the
     rotation operator ‘Rx’ for rotation through angle ‘t’.

 -- Function: RY (s,t)
     ‘RY(s)’ for spin ‘s’ returns the matrix representation of the
     rotation operator ‘Ry’ for rotation through angle ‘t’.

 -- Function: RZ (s,t)
     ‘RZ(s)’ for spin ‘s’ returns the matrix representation of the
     rotation operator ‘Rz’ for rotation through angle ‘t’.

     (%i1) RZ(1/2,t);
     Proviso: assuming 64*t # 0
                                  [     %i t         ]
                                  [   - ----         ]
                                  [      2           ]
                                  [ %e          0    ]
     (%o1)                        [                  ]
                                  [             %i t ]
                                  [             ---- ]
                                  [              2   ]
                                  [    0      %e     ]

1.4 Time-evolution operator
===========================

 -- Function: UU (H,t)
     ‘UU(H,t)’ is the time evolution operator for Hamiltonian ‘H’.  It
     is defined as the matrix exponential ‘matrixexp(-%i*H*t/hbar)’.

     (%i1) UU(w*Sy,t);
     Proviso: assuming 64*t*w # 0
                                [     t w         t w  ]
                                [ cos(---)  - sin(---) ]
                                [      2           2   ]
     (%o1)                      [                      ]
                                [     t w        t w   ]
                                [ sin(---)   cos(---)  ]
                                [      2          2    ]

1.5 Tensor products
===================

Tensor products are represented as lists in Maxima.  The ket tensor
product ‘|z+,z+>’ is represented as ‘[tpket,zp,zp]’, and the bra tensor
product ‘<a,b|’ is represented as ‘[tpbra,a,b]’ for kets ‘a’ and ‘b’.
The list labels ‘tpket’ and ‘tpbra’ ensure calculations are performed
with the correct kind of objects.

 -- Function: tpket (k_{1}, k_{2}, ...)
     ‘tpket’ produces a tensor product of kets ‘k_{i}’.  All of the
     elements must pass the ‘ketp’ predicate test to be accepted.

 -- Function: tpbra (b_{1}, b_{2}, ...)
     ‘tpbra’ produces a tensor product of bras ‘b_{i}’.  All of the
     elements must pass the ‘brap’ predicate test to be accepted.

 -- Function: tpketp (tpket)
     ‘tpketp’ checks to see that the ket has the 'tpket' marker.

 -- Function: tpbrap (tpbra)
     ‘tpbrap’ checks to see that the bra has the 'tpbra' marker.

 -- Function: tpbraket (B,K)
     ‘tpbraket’ takes the inner product of the tensor products ‘B’ and
     ‘K’.  The tensor products must be of the same length (number of
     kets must equal the number of bras).

   Examples below show how to create tensor products and take the
bracket of tensor products.

     (%i1) tpket(zp,zm);
                                         [ 1 ]  [ 0 ]
     (%o1)                         tpket([   ], [   ])
                                         [ 0 ]  [ 1 ]
     (%i2) tpket('zp,'zm);
     (%o2)                            tpket(zp, zm)
     (%i3) tpket([zp,zm]);
                                          [ 1 ]  [ 0 ]
     (%o3)                       [tpket, [[   ], [   ]]]
                                          [ 0 ]  [ 1 ]
     (%i1) kill(a,b,c,d);
     (%o1)                                done
     (%i2) declare([a,b,c,d],complex);
     (%o2)                                done
     (%i3) tpbra([bra([a,b]),bra([c,d])]);
     (%o3)                    [tpbra, [[ a  b ], [ c  d ]]]
     (%i4) tpbra([dagger(zp),bra([c,d])]);
     (%o4)                    [tpbra, [[ 1  0 ], [ c  d ]]]
     (%i1) K:tpket([zp,zm]);
                                          [ 1 ]  [ 0 ]
     (%o1)                       [tpket, [[   ], [   ]]]
                                          [ 0 ]  [ 1 ]
     (%i2) zpb:dagger(zp);
     (%o2)                              [ 1  0 ]
     (%i3) zmb:dagger(zm);
     (%o3)                              [ 0  1 ]
     (%i4) B:tpbra([zpb,zmb]);
     (%o4)                    [tpbra, [[ 1  0 ], [ 0  1 ]]]
     (%i5) tpbraket(K,B);
     (%o5)                                false
     (%i6) tpbraket(B,K);
     (%o6)                                  1


File: qm.info,  Node: Function and Variable Index,  Prev: Top,  Up: Top

Appendix A Function and Variable index
**************************************

 [index ]
* Menu:

* autobra:                               Functions and Variables for qm.
                                                              (line 102)
* autoket:                               Functions and Variables for qm.
                                                              (line  83)
* bra:                                   Functions and Variables for qm.
                                                              (line  32)
* braket:                                Functions and Variables for qm.
                                                              (line 126)
* brap:                                  Functions and Variables for qm.
                                                              (line  67)
* commutator:                            Functions and Variables for qm.
                                                              (line 278)
* dagger:                                Functions and Variables for qm.
                                                              (line 117)
* expect:                                Functions and Variables for qm.
                                                              (line 337)
* JM:                                    Functions and Variables for qm.
                                                              (line 423)
* jmbra:                                 Functions and Variables for qm.
                                                              (line 363)
* jmbraket:                              Functions and Variables for qm.
                                                              (line 393)
* jmbrap:                                Functions and Variables for qm.
                                                              (line 384)
* jmcheck:                               Functions and Variables for qm.
                                                              (line 387)
* jmket:                                 Functions and Variables for qm.
                                                              (line 359)
* jmketp:                                Functions and Variables for qm.
                                                              (line 376)
* JP:                                    Functions and Variables for qm.
                                                              (line 419)
* Jsqr:                                  Functions and Variables for qm.
                                                              (line 427)
* Jz:                                    Functions and Variables for qm.
                                                              (line 431)
* ket:                                   Functions and Variables for qm.
                                                              (line  11)
* ketp:                                  Functions and Variables for qm.
                                                              (line  49)
* magsqr:                                Functions and Variables for qm.
                                                              (line 150)
* norm:                                  Functions and Variables for qm.
                                                              (line 138)
* qm_variance:                           Functions and Variables for qm.
                                                              (line 344)
* RX:                                    Functions and Variables for qm.
                                                              (line 476)
* RY:                                    Functions and Variables for qm.
                                                              (line 480)
* RZ:                                    Functions and Variables for qm.
                                                              (line 484)
* sigmax:                                Functions and Variables for qm.
                                                              (line 247)
* sigmay:                                Functions and Variables for qm.
                                                              (line 250)
* sigmaz:                                Functions and Variables for qm.
                                                              (line 253)
* SM:                                    Functions and Variables for qm.
                                                              (line 455)
* SP:                                    Functions and Variables for qm.
                                                              (line 452)
* Sx:                                    Functions and Variables for qm.
                                                              (line 256)
* SX:                                    Functions and Variables for qm.
                                                              (line 296)
* Sy:                                    Functions and Variables for qm.
                                                              (line 259)
* SY:                                    Functions and Variables for qm.
                                                              (line 301)
* Sz:                                    Functions and Variables for qm.
                                                              (line 262)
* SZ:                                    Functions and Variables for qm.
                                                              (line 306)
* tpbra:                                 Functions and Variables for qm.
                                                              (line 530)
* tpbraket:                              Functions and Variables for qm.
                                                              (line 540)
* tpbrap:                                Functions and Variables for qm.
                                                              (line 537)
* tpket:                                 Functions and Variables for qm.
                                                              (line 526)
* tpketp:                                Functions and Variables for qm.
                                                              (line 534)
* UU:                                    Functions and Variables for qm.
                                                              (line 503)
* xm:                                    Functions and Variables for qm.
                                                              (line 192)
* xp:                                    Functions and Variables for qm.
                                                              (line 189)
* ym:                                    Functions and Variables for qm.
                                                              (line 198)
* yp:                                    Functions and Variables for qm.
                                                              (line 195)
* zm:                                    Functions and Variables for qm.
                                                              (line 186)
* zp:                                    Functions and Variables for qm.
                                                              (line 183)

 [index ]
* Menu:

* hbar:                                  Functions and Variables for qm.
                                                                (line 6)



Tag Table:
Node: Top287
Node: Introduction to package qm605
Node: Functions and Variables for qm4915
Ref: ket5268
Ref: bra6211
Ref: ketp6964
Ref: brap7669
Ref: autoket8392
Ref: autobra9264
Ref: dagger9934
Ref: braket10276
Ref: norm10885
Node: Function and Variable Index28168

End Tag Table


Local Variables:
coding: utf-8
End:
